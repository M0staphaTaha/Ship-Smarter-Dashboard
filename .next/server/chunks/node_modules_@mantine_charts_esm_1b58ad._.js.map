{
  "version": 3,
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["../../../src/utils/get-series-labels/get-series-labels.ts","/turbopack/[project]/node_modules/@mantine/charts/esm/utils/get-series-labels/get-series-labels.mjs"],"sourcesContent":["import { ChartSeries } from '../../types';\n\ntype ChartSeriesLabels = Record<string, string | undefined>;\n\nexport function getSeriesLabels(series: ChartSeries[] | undefined): ChartSeriesLabels {\n  if (!series) {\n    return {};\n  }\n\n  return series.reduce<ChartSeriesLabels>((acc, item) => {\n    acc[item.name] = item.label;\n    return acc;\n  }, {});\n}\n",null],"names":[],"mappings":";;;;AACO,SAAS,gBAAgB,MAAM;IACpC,IAAI,CAAC,QAAQ;QACX,OAAO,CAAA;IACR;IACD,OAAO,OAAO,MAAM,CAAC,CAAC,KAAK;QACzB,GAAG,CAAC,KAAK,IAAI,CAAC,GAAG,KAAK,KAAK;QAC3B,OAAO;IACR,GAAE,CAAE;AACP"}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@mantine/charts/esm/ChartTooltip/ChartTooltip.module.css.mjs"],"names":[],"mappings":""}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["../../src/ChartTooltip/ChartTooltip.tsx","/turbopack/[project]/node_modules/@mantine/charts/esm/ChartTooltip/ChartTooltip.mjs"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  ColorSwatch,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport { ChartSeries } from '../types';\nimport { getSeriesLabels } from '../utils';\nimport classes from './ChartTooltip.module.css';\n\nexport function getFilteredChartTooltipPayload(payload: Record<string, any>[], segmentId?: string) {\n  const duplicatesFilter = payload.filter((item) => item.fill !== 'none' || !item.color);\n\n  if (!segmentId) {\n    return duplicatesFilter;\n  }\n\n  return duplicatesFilter.filter((item) => item.name === segmentId);\n}\n\nfunction getData(item: Record<string, any>, type: 'area' | 'radial' | 'scatter') {\n  if (type === 'radial' || type === 'scatter') {\n    return item.value;\n  }\n\n  return item.payload[item.dataKey];\n}\n\nexport type ChartTooltipStylesNames =\n  | 'tooltip'\n  | 'tooltipItem'\n  | 'tooltipItemBody'\n  | 'tooltipItemColor'\n  | 'tooltipItemName'\n  | 'tooltipItemData'\n  | 'tooltipLabel'\n  | 'tooltipBody';\n\nexport interface ChartTooltipProps\n  extends BoxProps,\n    StylesApiProps<ChartTooltipFactory>,\n    ElementProps<'div'> {\n  /** Main tooltip label */\n  label?: React.ReactNode;\n\n  /** Chart data provided by recharts */\n  payload: Record<string, any>[] | undefined;\n\n  /** Data units, provided by parent component */\n  unit?: string;\n\n  /** Tooltip type that determines the content and styles, `area` for LineChart, AreaChart and BarChart, `radial` for DonutChart and PieChart, `'area'` by default */\n  type?: 'area' | 'radial' | 'scatter';\n\n  /** Id of the segment to display data for. Only applicable when `type=\"radial\"`. If not set, all data is rendered. */\n  segmentId?: string;\n\n  /** Chart series data, applicable only for `area` type */\n  series?: ChartSeries[];\n\n  /** A function to format values */\n  valueFormatter?: (value: number) => string;\n}\n\nexport type ChartTooltipFactory = Factory<{\n  props: ChartTooltipProps;\n  ref: HTMLDivElement;\n  stylesNames: ChartTooltipStylesNames;\n}>;\n\nconst defaultProps: Partial<ChartTooltipProps> = {\n  type: 'area',\n};\n\nexport const ChartTooltip = factory<ChartTooltipFactory>((_props, ref) => {\n  const props = useProps('ChartTooltip', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    payload,\n    label,\n    unit,\n    type,\n    segmentId,\n    mod,\n    series,\n    valueFormatter,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n\n  const getStyles = useStyles<ChartTooltipFactory>({\n    name: 'ChartTooltip',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n  });\n\n  if (!payload) {\n    return null;\n  }\n\n  const filteredPayload = getFilteredChartTooltipPayload(payload, segmentId);\n  const scatterLabel = type === 'scatter' ? payload[0]?.payload?.name : null;\n  const labels = getSeriesLabels(series);\n  const _label = label || scatterLabel;\n\n  const items = filteredPayload.map((item) => (\n    <div key={item.name} data-type={type} {...getStyles('tooltipItem')}>\n      <div {...getStyles('tooltipItemBody')}>\n        <ColorSwatch\n          color={getThemeColor(item.color, theme)}\n          size={12}\n          {...getStyles('tooltipItemColor')}\n          withShadow={false}\n        />\n        <div {...getStyles('tooltipItemName')}>{labels[item.name] || item.name}</div>\n      </div>\n      <div {...getStyles('tooltipItemData')}>\n        {typeof valueFormatter === 'function'\n          ? valueFormatter(getData(item, type!))\n          : getData(item, type!)}\n        {unit || item.unit}\n      </div>\n    </div>\n  ));\n\n  return (\n    <Box {...getStyles('tooltip')} mod={[{ type }, mod]} ref={ref} {...others}>\n      {_label && <div {...getStyles('tooltipLabel')}>{_label}</div>}\n      <div {...getStyles('tooltipBody')}>{items}</div>\n    </Box>\n  );\n});\n\nChartTooltip.displayName = '@mantine/charts/ChartTooltip';\n",null],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAaO,SAAS,+BAA+B,OAAO,EAAE,SAAS;IAC/D,MAAM,mBAAmB,QAAQ,MAAM,CAAC,CAAC,OAAS,KAAK,IAAI,KAAK,UAAU,CAAC,KAAK,KAAK;IACrF,IAAI,CAAC,WAAW;QACd,OAAO;IACR;IACD,OAAO,iBAAiB,MAAM,CAAC,CAAC,OAAS,KAAK,IAAI,KAAK;AACzD;AACA,SAAS,QAAQ,IAAI,EAAE,IAAI;IACzB,IAAI,SAAS,YAAY,SAAS,WAAW;QAC3C,OAAO,KAAK,KAAK;IAClB;IACD,OAAO,KAAK,OAAO,CAAC,KAAK,OAAO,CAAC;AACnC;AACA,MAAM,eAAe;IACnB,MAAM;AACR;AACY,MAAC,eAAe,mLAAQ,CAAC,QAAQ;IAC3C,MAAM,QAAQ,iNAAS,gBAAgB,cAAc;IACrD,MAAM,EACJ,UAAU,EACV,SAAS,EACT,KAAK,EACL,MAAM,EACN,QAAQ,EACR,IAAI,EACJ,OAAO,EACP,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,SAAS,EACT,GAAG,EACH,MAAM,EACN,cAAc,EACd,GAAG,QACJ,GAAG;IACJ,MAAM,QAAQ;IACd,MAAM,YAAY,kNAAU;QAC1B,MAAM;QACN,OAAO;QACP;QACA;QACA;QACA;QACA;QACA;IACJ;IACE,IAAI,CAAC,SAAS;QACZ,OAAO;IACR;IACD,MAAM,kBAAkB,+BAA+B,SAAS;IAChE,MAAM,eAAe,SAAS,YAAY,OAAO,CAAC,EAAE,EAAE,SAAS,OAAO;IACtE,MAAM,SAAS,8NAAgB;IAC/B,MAAM,SAAS,SAAS;IACxB,MAAM,QAAQ,gBAAgB,GAAG,CAAC,CAAC,OAAyB,aAAA,GAAA,2NAAM,aAAa,CAAC,OAAO;YAAE,KAAK,KAAK,IAAI;YAAE,aAAa;YAAM,GAAG,UAAU,cAAc;QAAE,GAAA,aAAA,GAAkB,2NAAM,aAAa,CAAC,OAAO;YAAE,GAAG,UAAU,kBAAkB;QAAE,GAAA,aAAA,GAAkB,2NAAM,aAAa,uMAE5Q;YACE,OAAO,8PAAc,KAAK,KAAK,EAAE;YACjC,MAAM;YACN,GAAG,UAAU,mBAAmB;YAChC,YAAY;QACb,IACgB,aAAA,GAAA,2NAAM,aAAa,CAAC,OAAO;YAAE,GAAG,UAAU,kBAAkB;QAAA,GAAI,MAAM,CAAC,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,IAAE,aAAA,GAAkB,2NAAM,aAAa,CAAC,OAAO;YAAE,GAAG,UAAU,kBAAkB;QAAE,GAAE,OAAO,mBAAmB,aAAa,eAAe,QAAQ,MAAM,SAAS,QAAQ,MAAM,OAAO,QAAQ,KAAK,IAAI;IACxT,OAAuB,aAAA,GAAA,2NAAM,aAAa,yKAAM;QAAE,GAAG,UAAU,UAAU;QAAE,KAAK;YAAC;gBAAE;YAAM;YAAE;SAAI;QAAE;QAAK,GAAG,MAAM;IAAE,GAAE,UAA0B,aAAA,GAAA,2NAAM,aAAa,CAAC,OAAO;QAAE,GAAG,UAAU,eAAe;IAAA,GAAI,SAAyB,aAAA,GAAA,2NAAM,aAAa,CAAC,OAAO;QAAE,GAAG,UAAU,cAAc;IAAE,GAAE;AACjS;AACA,aAAa,WAAW,GAAG"}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@mantine/charts/esm/ChartLegend/ChartLegend.module.css.mjs"],"names":[],"mappings":""}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["../../src/ChartLegend/ChartLegend.tsx","/turbopack/[project]/node_modules/@mantine/charts/esm/ChartLegend/ChartLegend.mjs"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  ColorSwatch,\n  ElementProps,\n  factory,\n  Factory,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport { ChartSeries } from '../types';\nimport { getSeriesLabels } from '../utils';\nimport classes from './ChartLegend.module.css';\n\nexport function getFilteredChartLegendPayload(payload: Record<string, any>[]) {\n  return payload.filter((item) => item.color !== 'none');\n}\n\nexport type ChartLegendStylesNames = 'legendItem' | 'legendItemColor' | 'legendItemName' | 'legend';\n\nexport interface ChartLegendProps\n  extends BoxProps,\n    StylesApiProps<ChartLegendFactory>,\n    ElementProps<'div'> {\n  /** Chart data provided by recharts */\n  payload: Record<string, any>[] | undefined;\n\n  /** Function called when mouse enters/leaves one of the legend items */\n  onHighlight: (area: string | null) => void;\n\n  /** Position of the legend relative to the chart, used to apply margin on the corresponding side */\n  legendPosition: 'top' | 'bottom' | 'middle';\n\n  /** Data used for labels, only applicable for area charts: AreaChart, LineChart, BarChart */\n  series?: ChartSeries[];\n}\n\nexport type ChartLegendFactory = Factory<{\n  props: ChartLegendProps;\n  ref: HTMLDivElement;\n  stylesNames: ChartLegendStylesNames;\n}>;\n\nconst defaultProps: Partial<ChartLegendProps> = {};\n\nexport const ChartLegend = factory<ChartLegendFactory>((_props, ref) => {\n  const props = useProps('ChartLegend', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    payload,\n    onHighlight,\n    legendPosition,\n    mod,\n    series,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<ChartLegendFactory>({\n    name: 'ChartLegend',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n  });\n\n  if (!payload) {\n    return null;\n  }\n\n  const filteredPayload = getFilteredChartLegendPayload(payload);\n  const labels = getSeriesLabels(series);\n\n  const items = filteredPayload.map((item, index) => (\n    <div\n      key={index}\n      {...getStyles('legendItem')}\n      onMouseEnter={() => onHighlight(item.dataKey)}\n      onMouseLeave={() => onHighlight(null)}\n    >\n      <ColorSwatch\n        color={item.color}\n        size={12}\n        {...getStyles('legendItemColor')}\n        withShadow={false}\n      />\n      <p {...getStyles('legendItemName')}>{labels[item.dataKey] || item.dataKey}</p>\n    </div>\n  ));\n\n  return (\n    <Box ref={ref} mod={[{ position: legendPosition }, mod]} {...getStyles('legend')} {...others}>\n      {items}\n    </Box>\n  );\n});\n\nChartLegend.displayName = '@mantine/charts/ChartLegend';\n",null],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAWO,SAAS,8BAA8B,OAAO;IACnD,OAAO,QAAQ,MAAM,CAAC,CAAC,OAAS,KAAK,KAAK,KAAK;AACjD;AACA,MAAM,eAAe,CAAA;AACT,MAAC,cAAc,mLAAQ,CAAC,QAAQ;IAC1C,MAAM,QAAQ,iNAAS,eAAe,cAAc;IACpD,MAAM,EACJ,UAAU,EACV,SAAS,EACT,KAAK,EACL,MAAM,EACN,QAAQ,EACR,IAAI,EACJ,OAAO,EACP,WAAW,EACX,cAAc,EACd,GAAG,EACH,MAAM,EACN,GAAG,QACJ,GAAG;IACJ,MAAM,YAAY,kNAAU;QAC1B,MAAM;QACN,OAAO;QACP;QACA;QACA;QACA;QACA;QACA;IACJ;IACE,IAAI,CAAC,SAAS;QACZ,OAAO;IACR;IACD,MAAM,kBAAkB,8BAA8B;IACtD,MAAM,SAAS,8NAAgB;IAC/B,MAAM,QAAQ,gBAAgB,GAAG,CAAC,CAAC,MAAM,QAA0B,aAAA,GAAA,2NAAM,aAAa,CACpF,OACA;YACE,KAAK;YACL,GAAG,UAAU,aAAa;YAC1B,cAAc,IAAM,YAAY,KAAK,OAAO;YAC5C,cAAc,IAAM,YAAY;QACjC,GACe,aAAA,GAAA,2NAAM,aAAa,uMAEjC;YACE,OAAO,KAAK,KAAK;YACjB,MAAM;YACN,GAAG,UAAU,kBAAkB;YAC/B,YAAY;QACb,IAEa,aAAA,GAAA,2NAAM,aAAa,CAAC,KAAK;YAAE,GAAG,UAAU,iBAAiB;QAAA,GAAI,MAAM,CAAC,KAAK,OAAO,CAAC,IAAI,KAAK,OAAO;IAEnH,OAAuB,aAAA,GAAA,2NAAM,aAAa,yKAAM;QAAE;QAAK,KAAK;YAAC;gBAAE,UAAU;YAAgB;YAAE;SAAI;QAAE,GAAG,UAAU,SAAS;QAAE,GAAG,MAAM;IAAA,GAAI;AACxI;AACA,YAAY,WAAW,GAAG"}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":["../../src/AreaChart/AreaGradient.tsx","/turbopack/[project]/node_modules/@mantine/charts/esm/AreaChart/AreaGradient.mjs"],"sourcesContent":["import React from 'react';\n\ninterface AreaGradientProps {\n  color: string;\n  id: string;\n  withGradient: boolean | undefined;\n  fillOpacity: number | undefined;\n}\n\nexport function AreaGradient({ color, id, withGradient, fillOpacity }: AreaGradientProps) {\n  return (\n    <>\n      {withGradient ? (\n        <linearGradient id={id} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop offset=\"0%\" stopColor={color} stopOpacity={fillOpacity} />\n          <stop offset=\"100%\" stopColor={color} stopOpacity={0.01} />\n        </linearGradient>\n      ) : (\n        <linearGradient id={id} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop stopColor={color} stopOpacity={fillOpacity ?? 0.2} />\n        </linearGradient>\n      )}\n    </>\n  );\n}\n\nAreaGradient.displayName = '@mantine/charts/AreaGradient';\n",null],"names":[],"mappings":";;;;;;;AAEO,SAAS,aAAa,EAAE,KAAK,EAAE,EAAE,EAAE,YAAY,EAAE,WAAW,EAAE;IACnE,OAAuB,aAAA,GAAA,2NAAM,aAAa,CAAC,2NAAM,QAAQ,EAAE,MAAM,eAA+B,aAAA,GAAA,2NAAM,aAAa,CAAC,kBAAkB;QAAE;QAAI,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;IAAK,GAAA,aAAA,GAAkB,2NAAM,aAAa,CAAC,QAAQ;QAAE,QAAQ;QAAM,WAAW;QAAO,aAAa;IAAa,IAAmB,aAAA,GAAA,2NAAM,aAAa,CAAC,QAAQ;QAAE,QAAQ;QAAQ,WAAW;QAAO,aAAa;IAAM,MAAE,aAAA,GAAmB,2NAAM,aAAa,CAAC,kBAAkB;QAAE;QAAI,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;IAAG,GAAoB,aAAA,GAAA,2NAAM,aAAa,CAAC,QAAQ;QAAE,WAAW;QAAO,aAAa,eAAe;IAAG;AACxkB;AACA,aAAa,WAAW,GAAG"}},
    {"offset": {"line": 270, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 275, "column": 0}, "map": {"version":3,"sources":["../../src/AreaChart/AreaSplit.tsx","/turbopack/[project]/node_modules/@mantine/charts/esm/AreaChart/AreaSplit.mjs"],"sourcesContent":["import React from 'react';\nimport { getThemeColor, MantineColor, useMantineTheme } from '@mantine/core';\n\ninterface AreaSplitProps {\n  offset: number;\n  colors: [MantineColor, MantineColor];\n  id?: string;\n  fillOpacity: number | undefined;\n}\n\nexport function AreaSplit({ offset, id, colors, fillOpacity }: AreaSplitProps) {\n  const theme = useMantineTheme();\n\n  return (\n    <linearGradient id={id} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n      <stop\n        offset={offset}\n        stopColor={getThemeColor(colors[0], theme)}\n        stopOpacity={fillOpacity ?? 0.2}\n      />\n      <stop\n        offset={offset}\n        stopColor={getThemeColor(colors[1], theme)}\n        stopOpacity={fillOpacity ?? 0.2}\n      />\n    </linearGradient>\n  );\n}\n\nAreaSplit.displayName = '@mantine/charts/AreaSplit';\n",null],"names":[],"mappings":";;;;;;;;;;;AAGO,SAAS,UAAU,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE;IAC3D,MAAM,QAAQ;IACd,OAAuB,aAAA,GAAA,2NAAM,aAAa,CAAC,kBAAkB;QAAE;QAAI,IAAI;QAAK,IAAI;QAAK,IAAI;QAAK,IAAI;IAAG,GAAoB,aAAA,GAAA,2NAAM,aAAa,CAC1I,QACA;QACE;QACA,WAAW,8PAAc,MAAM,CAAC,EAAE,EAAE;QACpC,aAAa,eAAe;IAC7B,IACF,aAAA,GAAkB,2NAAM,aAAa,CACpC,QACA;QACE;QACA,WAAW,8PAAc,MAAM,CAAC,EAAE,EAAE;QACpC,aAAa,eAAe;IAC7B;AAEL;AACA,UAAU,WAAW,GAAG"}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"sources":["../../src/AreaChart/get-split-offset.ts","/turbopack/[project]/node_modules/@mantine/charts/esm/AreaChart/get-split-offset.mjs"],"sourcesContent":["import type { ChartData } from '../types';\nimport type { AreaChartSeries } from './AreaChart';\n\ninterface GetSplitOffsetInput {\n  data: ChartData;\n  dataKey: string;\n}\n\nexport function getSplitOffset({ data, dataKey }: GetSplitOffsetInput) {\n  const dataMax = Math.max(...data.map((item) => item[dataKey]));\n  const dataMin = Math.min(...data.map((item) => item[dataKey]));\n\n  if (dataMax <= 0) {\n    return 0;\n  }\n  if (dataMin >= 0) {\n    return 1;\n  }\n\n  return dataMax / (dataMax - dataMin);\n}\n\ninterface GetDefaultSplitOffsetInput {\n  data: ChartData;\n  series: AreaChartSeries[];\n}\n\nexport function getDefaultSplitOffset({ data, series }: GetDefaultSplitOffsetInput) {\n  if (series.length === 1) {\n    const dataKey = series[0].name;\n    return getSplitOffset({ data, dataKey });\n  }\n\n  return 0.5;\n}\n",null],"names":[],"mappings":";;;;;AACO,SAAS,eAAe,EAAE,IAAI,EAAE,OAAO,EAAE;IAC9C,MAAM,UAAU,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC,CAAC,OAAS,IAAI,CAAC,QAAQ;IAC5D,MAAM,UAAU,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC,CAAC,OAAS,IAAI,CAAC,QAAQ;IAC5D,IAAI,WAAW,GAAG;QAChB,OAAO;IACR;IACD,IAAI,WAAW,GAAG;QAChB,OAAO;IACR;IACD,OAAO,UAAO,CAAI,UAAU,OAAO;AACrC;AACO,SAAS,sBAAsB,EAAE,IAAI,EAAE,MAAM,EAAE;IACpD,IAAI,OAAO,MAAM,KAAK,GAAG;QACvB,MAAM,UAAU,MAAM,CAAC,EAAE,CAAC,IAAI;QAC9B,OAAO,eAAe;YAAE;YAAM;QAAS;IACxC;IACD,OAAO;AACT"}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 345, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@mantine/charts/esm/grid-chart.module.css.mjs"],"names":[],"mappings":""}},
    {"offset": {"line": 358, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 363, "column": 0}, "map": {"version":3,"sources":["../../src/AreaChart/AreaChart.tsx","/turbopack/[project]/node_modules/@mantine/charts/esm/AreaChart/AreaChart.mjs"],"sourcesContent":["import React, { Fragment, useId, useState } from 'react';\nimport {\n  Area,\n  AreaProps,\n  CartesianGrid,\n  DotProps,\n  Label,\n  Legend,\n  AreaChart as ReChartsAreaChart,\n  ReferenceLine,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartLegend, ChartLegendStylesNames } from '../ChartLegend';\nimport { ChartTooltip, ChartTooltipStylesNames } from '../ChartTooltip';\nimport type { BaseChartStylesNames, ChartSeries, GridChartBaseProps } from '../types';\nimport { AreaGradient } from './AreaGradient';\nimport { AreaSplit } from './AreaSplit';\nimport { getDefaultSplitOffset } from './get-split-offset';\nimport classes from '../grid-chart.module.css';\n\nfunction valueToPercent(value: number) {\n  return `${(value * 100).toFixed(0)}%`;\n}\n\nexport interface AreaChartSeries extends ChartSeries {\n  strokeDasharray?: string | number;\n}\n\nexport type AreaChartType = 'default' | 'stacked' | 'percent' | 'split';\n\nexport type AreaChartCurveType =\n  | 'bump'\n  | 'linear'\n  | 'natural'\n  | 'monotone'\n  | 'step'\n  | 'stepBefore'\n  | 'stepAfter';\n\nexport type AreaChartStylesNames =\n  | 'area'\n  | BaseChartStylesNames\n  | ChartLegendStylesNames\n  | ChartTooltipStylesNames;\n\nexport type AreaChartCSSVariables = {\n  root: '--chart-text-color' | '--chart-grid-color';\n};\n\nexport interface AreaChartProps\n  extends BoxProps,\n    GridChartBaseProps,\n    StylesApiProps<AreaChartFactory>,\n    ElementProps<'div'> {\n  /** An array of objects with `name` and `color` keys. Determines which data should be consumed from the `data` array. */\n  series: AreaChartSeries[];\n\n  /** Controls how chart areas are positioned relative to each other, `'default'` by default */\n  type?: AreaChartType;\n\n  /** Determines whether the chart area should be represented with a gradient instead of the solid color, `false` by default */\n  withGradient?: boolean;\n\n  /** Type of the curve, `'monotone'` by default */\n  curveType?: AreaChartCurveType;\n\n  /** Determines whether dots should be displayed, `true` by default */\n  withDots?: boolean;\n\n  /** Props passed down to all dots. Ignored if `withDots={false}` is set. */\n  dotProps?: Omit<DotProps, 'ref'>;\n\n  /** Props passed down to all active dots. Ignored if `withDots={false}` is set. */\n  activeDotProps?: Omit<DotProps, 'ref'>;\n\n  /** Stroke width for the chart areas, `2` by default */\n  strokeWidth?: number;\n\n  /** Props passed down to recharts `AreaChart` component */\n  areaChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsAreaChart>;\n\n  /** Controls fill opacity of all areas, `0.2` by default */\n  fillOpacity?: number;\n\n  /** A tuple of colors used when `type=\"split\"` is set, ignored in all other cases. A tuple may include theme colors reference or any valid CSS colors `['green.7', 'red.7']` by default. */\n  splitColors?: [MantineColor, MantineColor];\n\n  /** Offset for the split gradient. By default, value is inferred from `data` and `series` if possible. Must be generated from the data array with `getSplitOffset` function. */\n  splitOffset?: number;\n\n  /** Determines whether points with `null` values should be connected, `true` by default */\n  connectNulls?: boolean;\n\n  /** Additional components that are rendered inside recharts `AreaChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `Area` component */\n  areaProps?:\n    | ((series: AreaChartSeries) => Partial<Omit<AreaProps, 'ref'>>)\n    | Partial<Omit<AreaProps, 'ref'>>;\n}\n\nexport type AreaChartFactory = Factory<{\n  props: AreaChartProps;\n  ref: HTMLDivElement;\n  stylesNames: AreaChartStylesNames;\n  vars: AreaChartCSSVariables;\n}>;\n\nconst defaultProps: Partial<AreaChartProps> = {\n  withXAxis: true,\n  withYAxis: true,\n  withDots: true,\n  withTooltip: true,\n  connectNulls: true,\n  strokeWidth: 2,\n  tooltipAnimationDuration: 0,\n  fillOpacity: 0.2,\n  tickLine: 'y',\n  strokeDasharray: '5 5',\n  curveType: 'monotone',\n  gridAxis: 'x',\n  type: 'default',\n  splitColors: ['green.7', 'red.7'],\n  orientation: 'horizontal',\n};\n\nconst varsResolver = createVarsResolver<AreaChartFactory>((theme, { textColor, gridColor }) => ({\n  root: {\n    '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n    '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n  },\n}));\n\nexport const AreaChart = factory<AreaChartFactory>((_props, ref) => {\n  const props = useProps('AreaChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    series,\n    withGradient,\n    dataKey,\n    withXAxis,\n    withYAxis,\n    curveType,\n    gridProps,\n    withDots,\n    tickLine,\n    strokeDasharray,\n    gridAxis,\n    unit,\n    yAxisProps,\n    xAxisProps,\n    dotProps,\n    activeDotProps,\n    strokeWidth,\n    tooltipAnimationDuration,\n    type,\n    legendProps,\n    tooltipProps,\n    withLegend,\n    withTooltip,\n    areaChartProps,\n    fillOpacity,\n    splitColors,\n    splitOffset,\n    connectNulls,\n    onMouseLeave,\n    orientation,\n    referenceLines,\n    dir,\n    valueFormatter,\n    children,\n    areaProps,\n    xAxisLabel,\n    yAxisLabel,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n  const baseId = useId();\n  const splitId = `${baseId}-split`;\n  const withXTickLine = gridAxis !== 'none' && (tickLine === 'x' || tickLine === 'xy');\n  const withYTickLine = gridAxis !== 'none' && (tickLine === 'y' || tickLine === 'xy');\n  const isAnimationActive = (tooltipAnimationDuration || 0) > 0;\n  const _withGradient = typeof withGradient === 'boolean' ? withGradient : type === 'default';\n  const stacked = type === 'stacked' || type === 'percent';\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n  const shouldHighlight = highlightedArea !== null;\n  const handleMouseLeave = (event: React.MouseEvent<HTMLDivElement>) => {\n    setHighlightedArea(null);\n    onMouseLeave?.(event);\n  };\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<AreaChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const getStyles = useStyles<AreaChartFactory>({\n    name: 'AreaChart',\n    classes: classes as any,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const dotsAreas = series.map((item) => {\n    const color = getThemeColor(item.color, theme);\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n    return (\n      <Area\n        {...getStyles('area')}\n        activeDot={{ fill: theme.white, stroke: color, strokeWidth: 2, r: 4, ...activeDotProps }}\n        dot={{ fill: color, fillOpacity: dimmed ? 0 : 1, strokeWidth: 2, r: 4, ...dotProps }}\n        key={item.name}\n        name={item.name}\n        type={curveType}\n        dataKey={item.name}\n        fill=\"none\"\n        strokeWidth={strokeWidth}\n        stroke=\"none\"\n        isAnimationActive={false}\n        connectNulls={connectNulls}\n        stackId={stacked ? 'stack-dots' : undefined}\n        {...(typeof areaProps === 'function' ? areaProps(item) : areaProps)}\n      />\n    );\n  });\n\n  const areas = series.map((item) => {\n    const id = `${baseId}-${item.color.replace(/[^a-zA-Z0-9]/g, '')}`;\n    const color = getThemeColor(item.color, theme);\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n\n    return (\n      <Fragment key={item.name}>\n        <defs>\n          <AreaGradient\n            color={color}\n            withGradient={_withGradient}\n            id={id}\n            fillOpacity={fillOpacity}\n          />\n        </defs>\n        <Area\n          {...getStyles('area')}\n          activeDot={false}\n          dot={false}\n          name={item.name}\n          type={curveType}\n          dataKey={item.name}\n          fill={type === 'split' ? `url(#${splitId})` : `url(#${id})`}\n          strokeWidth={strokeWidth}\n          stroke={color}\n          isAnimationActive={false}\n          connectNulls={connectNulls}\n          stackId={stacked ? 'stack' : undefined}\n          fillOpacity={dimmed ? 0 : 1}\n          strokeOpacity={dimmed ? 0.5 : 1}\n          strokeDasharray={item.strokeDasharray}\n          {...(typeof areaProps === 'function' ? areaProps(item) : areaProps)}\n        />\n      </Fragment>\n    );\n  });\n\n  const referenceLinesItems = referenceLines?.map((line, index) => {\n    const color = getThemeColor(line.color, theme);\n    return (\n      <ReferenceLine\n        key={index}\n        stroke={line.color ? color : 'var(--chart-grid-color)'}\n        strokeWidth={1}\n        {...line}\n        label={{\n          value: line.label,\n          fill: line.color ? color : 'currentColor',\n          fontSize: 12,\n          position: line.labelPosition ?? 'insideBottomLeft',\n        }}\n        {...getStyles('referenceLine')}\n      />\n    );\n  });\n\n  return (\n    <Box\n      ref={ref}\n      {...getStyles('root')}\n      onMouseLeave={handleMouseLeave}\n      dir={dir || 'ltr'}\n      {...others}\n    >\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsAreaChart\n          data={data}\n          stackOffset={type === 'percent' ? 'expand' : undefined}\n          layout={orientation}\n          margin={{\n            bottom: xAxisLabel ? 30 : undefined,\n            left: yAxisLabel ? 10 : undefined,\n            right: yAxisLabel ? 5 : undefined,\n          }}\n          {...areaChartProps}\n        >\n          {referenceLinesItems}\n          {withLegend && (\n            <Legend\n              verticalAlign=\"top\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'top'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                />\n              )}\n              {...legendProps}\n            />\n          )}\n\n          <CartesianGrid\n            strokeDasharray={strokeDasharray}\n            vertical={gridAxis === 'y' || gridAxis === 'xy'}\n            horizontal={gridAxis === 'x' || gridAxis === 'xy'}\n            {...getStyles('grid')}\n            {...gridProps}\n          />\n\n          <XAxis\n            hide={!withXAxis}\n            {...(orientation === 'vertical' ? { type: 'number' } : { dataKey })}\n            tick={{ transform: 'translate(0, 10)', fontSize: 12, fill: 'currentColor' }}\n            stroke=\"\"\n            interval=\"preserveStartEnd\"\n            tickLine={withXTickLine ? { stroke: 'currentColor' } : false}\n            minTickGap={5}\n            {...getStyles('axis')}\n            {...xAxisProps}\n          >\n            {xAxisLabel && (\n              <Label position=\"insideBottom\" offset={-20} fontSize={12} {...getStyles('axisLabel')}>\n                {xAxisLabel}\n              </Label>\n            )}\n            {xAxisProps?.children}\n          </XAxis>\n\n          <YAxis\n            hide={!withYAxis}\n            axisLine={false}\n            {...(orientation === 'vertical' ? { dataKey, type: 'category' } : { type: 'number' })}\n            tickLine={withYTickLine ? { stroke: 'currentColor' } : false}\n            tick={{ transform: 'translate(-10, 0)', fontSize: 12, fill: 'currentColor' }}\n            allowDecimals\n            unit={unit}\n            tickFormatter={type === 'percent' ? valueToPercent : valueFormatter}\n            {...getStyles('axis')}\n            {...yAxisProps}\n          >\n            {yAxisLabel && (\n              <Label\n                position=\"insideLeft\"\n                angle={-90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {yAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={isAnimationActive}\n              position={{ y: 0 }}\n              cursor={{\n                stroke: 'var(--chart-grid-color)',\n                strokeWidth: 1,\n                strokeDasharray,\n              }}\n              content={({ label, payload }) => (\n                <ChartTooltip\n                  label={label}\n                  payload={payload}\n                  unit={unit}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {type === 'split' && (\n            <defs>\n              <AreaSplit\n                colors={splitColors!}\n                id={splitId}\n                offset={splitOffset ?? getDefaultSplitOffset({ data: data!, series })}\n                fillOpacity={fillOpacity}\n              />\n            </defs>\n          )}\n\n          {areas}\n          {withDots && dotsAreas}\n          {children}\n        </ReChartsAreaChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nAreaChart.classes = classes;\nAreaChart.displayName = '@mantine/charts/AreaChart';\n",null],"names":[],"mappings":"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"}},
    {"offset": {"line": 668, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 673, "column": 0}, "map": {"version":3,"sources":["../../src/BarChart/BarChart.tsx","/turbopack/[project]/node_modules/@mantine/charts/esm/BarChart/BarChart.mjs"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Bar,\n  BarProps,\n  CartesianGrid,\n  Label,\n  Legend,\n  BarChart as ReChartsBarChart,\n  ReferenceLine,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartLegend, ChartLegendStylesNames } from '../ChartLegend';\nimport { ChartTooltip, ChartTooltipStylesNames } from '../ChartTooltip';\nimport type { BaseChartStylesNames, ChartSeries, GridChartBaseProps } from '../types';\nimport classes from '../grid-chart.module.css';\n\nfunction valueToPercent(value: number) {\n  return `${(value * 100).toFixed(0)}%`;\n}\n\nexport interface BarChartSeries extends ChartSeries {}\n\nexport type BarChartType = 'default' | 'stacked' | 'percent';\n\nexport type BarChartStylesNames =\n  | 'bar'\n  | BaseChartStylesNames\n  | ChartLegendStylesNames\n  | ChartTooltipStylesNames;\n\nexport type BarChartCssVariables = {\n  root: '--chart-text-color' | '--chart-grid-color' | '--chart-cursor-fill';\n};\n\nexport interface BarChartProps\n  extends BoxProps,\n    GridChartBaseProps,\n    StylesApiProps<BarChartFactory>,\n    ElementProps<'div'> {\n  /** Data used to display chart */\n  data: Record<string, any>[];\n\n  /** An array of objects with `name` and `color` keys. Determines which data should be consumed from the `data` array. */\n  series: BarChartSeries[];\n\n  /** Controls how bars are positioned relative to each other, `'default'` by default */\n  type?: BarChartType;\n\n  /** Controls fill opacity of all bars, `1` by default */\n  fillOpacity?: number;\n\n  /** Fill of hovered bar section, by default value is based on color scheme */\n  cursorFill?: MantineColor;\n\n  /** Props passed down to recharts `BarChart` component */\n  barChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsBarChart>;\n\n  /** Additional components that are rendered inside recharts `BarChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `Bar` component */\n  barProps?:\n    | ((series: BarChartSeries) => Partial<Omit<BarProps, 'ref'>>)\n    | Partial<Omit<BarProps, 'ref'>>;\n}\n\nexport type BarChartFactory = Factory<{\n  props: BarChartProps;\n  ref: HTMLDivElement;\n  stylesNames: BarChartStylesNames;\n  vars: BarChartCssVariables;\n}>;\n\nconst defaultProps: Partial<BarChartProps> = {\n  withXAxis: true,\n  withYAxis: true,\n  withTooltip: true,\n  tooltipAnimationDuration: 0,\n  fillOpacity: 1,\n  tickLine: 'y',\n  strokeDasharray: '5 5',\n  gridAxis: 'x',\n  type: 'default',\n};\n\nconst varsResolver = createVarsResolver<BarChartFactory>(\n  (theme, { textColor, gridColor, cursorFill }) => ({\n    root: {\n      '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n      '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n      '--chart-cursor-fill': cursorFill ? getThemeColor(cursorFill, theme) : undefined,\n    },\n  })\n);\n\nexport const BarChart = factory<BarChartFactory>((_props, ref) => {\n  const props = useProps('BarChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withLegend,\n    legendProps,\n    series,\n    onMouseLeave,\n    dataKey,\n    withTooltip,\n    withXAxis,\n    withYAxis,\n    gridAxis,\n    tickLine,\n    xAxisProps,\n    yAxisProps,\n    unit,\n    tooltipAnimationDuration,\n    strokeDasharray,\n    gridProps,\n    tooltipProps,\n    referenceLines,\n    fillOpacity,\n    barChartProps,\n    type,\n    orientation,\n    dir,\n    valueFormatter,\n    children,\n    barProps,\n    xAxisLabel,\n    yAxisLabel,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n  const withXTickLine = gridAxis !== 'none' && (tickLine === 'x' || tickLine === 'xy');\n  const withYTickLine = gridAxis !== 'none' && (tickLine === 'y' || tickLine === 'xy');\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n  const shouldHighlight = highlightedArea !== null;\n  const stacked = type === 'stacked' || type === 'percent';\n  const handleMouseLeave = (event: React.MouseEvent<HTMLDivElement>) => {\n    setHighlightedArea(null);\n    onMouseLeave?.(event);\n  };\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<BarChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const getStyles = useStyles<BarChartFactory>({\n    name: 'BarChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const bars = series.map((item) => {\n    const color = getThemeColor(item.color, theme);\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n\n    return (\n      <Bar\n        {...getStyles('bar')}\n        key={item.name}\n        name={item.name}\n        dataKey={item.name}\n        fill={color}\n        stroke={color}\n        isAnimationActive={false}\n        fillOpacity={dimmed ? 0.1 : fillOpacity}\n        strokeOpacity={dimmed ? 0.2 : 0}\n        stackId={stacked ? 'stack' : undefined}\n        {...(typeof barProps === 'function' ? barProps(item) : barProps)}\n      />\n    );\n  });\n\n  const referenceLinesItems = referenceLines?.map((line, index) => {\n    const color = getThemeColor(line.color, theme);\n    return (\n      <ReferenceLine\n        key={index}\n        stroke={line.color ? color : 'var(--chart-grid-color)'}\n        strokeWidth={1}\n        {...line}\n        label={{\n          value: line.label,\n          fill: line.color ? color : 'currentColor',\n          fontSize: 12,\n          position: line.labelPosition ?? 'insideBottomLeft',\n        }}\n        {...getStyles('referenceLine')}\n      />\n    );\n  });\n\n  return (\n    <Box\n      ref={ref}\n      {...getStyles('root')}\n      onMouseLeave={handleMouseLeave}\n      dir={dir || 'ltr'}\n      {...others}\n    >\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsBarChart\n          data={data}\n          stackOffset={type === 'percent' ? 'expand' : undefined}\n          layout={orientation}\n          margin={{\n            bottom: xAxisLabel ? 30 : undefined,\n            left: yAxisLabel ? 10 : undefined,\n            right: yAxisLabel ? 5 : undefined,\n          }}\n          {...barChartProps}\n        >\n          {withLegend && (\n            <Legend\n              verticalAlign=\"top\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'top'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                />\n              )}\n              {...legendProps}\n            />\n          )}\n\n          <XAxis\n            hide={!withXAxis}\n            {...(orientation === 'vertical' ? { type: 'number' } : { dataKey })}\n            tick={{ transform: 'translate(0, 10)', fontSize: 12, fill: 'currentColor' }}\n            stroke=\"\"\n            interval=\"preserveStartEnd\"\n            tickLine={withXTickLine ? { stroke: 'currentColor' } : false}\n            minTickGap={5}\n            {...getStyles('axis')}\n            {...xAxisProps}\n          >\n            {xAxisLabel && (\n              <Label position=\"insideBottom\" offset={-20} fontSize={12} {...getStyles('axisLabel')}>\n                {xAxisLabel}\n              </Label>\n            )}\n            {xAxisProps?.children}\n          </XAxis>\n\n          <YAxis\n            hide={!withYAxis}\n            axisLine={false}\n            {...(orientation === 'vertical' ? { dataKey, type: 'category' } : { type: 'number' })}\n            tickLine={withYTickLine ? { stroke: 'currentColor' } : false}\n            tick={{ transform: 'translate(-10, 0)', fontSize: 12, fill: 'currentColor' }}\n            allowDecimals\n            unit={unit}\n            tickFormatter={type === 'percent' ? valueToPercent : valueFormatter}\n            {...getStyles('axis')}\n            {...yAxisProps}\n          >\n            {yAxisLabel && (\n              <Label\n                position=\"insideLeft\"\n                angle={-90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {yAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          <CartesianGrid\n            strokeDasharray={strokeDasharray}\n            vertical={gridAxis === 'y' || gridAxis === 'xy'}\n            horizontal={gridAxis === 'x' || gridAxis === 'xy'}\n            {...getStyles('grid')}\n            {...gridProps}\n          />\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={tooltipAnimationDuration !== 0}\n              position={{ y: 0 }}\n              cursor={{\n                stroke: 'var(--chart-grid-color)',\n                strokeWidth: 1,\n                strokeDasharray,\n                fill: 'var(--chart-cursor-fill)',\n              }}\n              content={({ label, payload }) => (\n                <ChartTooltip\n                  label={label}\n                  payload={payload}\n                  unit={unit}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {bars}\n          {referenceLinesItems}\n          {children}\n        </ReChartsBarChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nBarChart.displayName = '@mantine/charts/BarChart';\nBarChart.classes = classes;\n",null],"names":[],"mappings":"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"}},
    {"offset": {"line": 908, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 913, "column": 0}, "map": {"version":3,"sources":["../../src/LineChart/LineChart.tsx","/turbopack/[project]/node_modules/@mantine/charts/esm/LineChart/LineChart.mjs"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  CartesianGrid,\n  DotProps,\n  Label,\n  Legend,\n  Line,\n  LineProps,\n  LineChart as ReChartsLineChart,\n  ReferenceLine,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartLegend, ChartLegendStylesNames } from '../ChartLegend';\nimport { ChartTooltip, ChartTooltipStylesNames } from '../ChartTooltip';\nimport type { BaseChartStylesNames, ChartSeries, GridChartBaseProps } from '../types';\nimport classes from '../grid-chart.module.css';\n\nexport type LineChartCurveType =\n  | 'bump'\n  | 'linear'\n  | 'natural'\n  | 'monotone'\n  | 'step'\n  | 'stepBefore'\n  | 'stepAfter';\n\nexport interface LineChartSeries extends ChartSeries {\n  strokeDasharray?: string | number;\n}\n\nexport type LineChartStylesNames =\n  | 'line'\n  | BaseChartStylesNames\n  | ChartLegendStylesNames\n  | ChartTooltipStylesNames;\n\nexport type LineChartCssVariables = {\n  root: '--chart-text-color' | '--chart-grid-color';\n};\n\nexport interface LineChartProps\n  extends BoxProps,\n    GridChartBaseProps,\n    StylesApiProps<LineChartFactory>,\n    ElementProps<'div'> {\n  /** Data used to display chart */\n  data: Record<string, any>[];\n\n  /** An array of objects with `name` and `color` keys. Determines which data should be consumed from the `data` array. */\n  series: LineChartSeries[];\n\n  /** Type of the curve, `'monotone'` by default */\n  curveType?: LineChartCurveType;\n\n  /** Controls fill opacity of all lines, `1` by default */\n  fillOpacity?: number;\n\n  /** Determines whether dots should be displayed, `true` by default */\n  withDots?: boolean;\n\n  /** Props passed down to all dots. Ignored if `withDots={false}` is set. */\n  dotProps?: Omit<DotProps, 'ref'>;\n\n  /** Props passed down to all active dots. Ignored if `withDots={false}` is set. */\n  activeDotProps?: Omit<DotProps, 'ref'>;\n\n  /** Stroke width for the chart lines, `2` by default */\n  strokeWidth?: number;\n\n  /** Props passed down to recharts `LineChart` component */\n  lineChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsLineChart>;\n\n  /** Determines whether points with `null` values should be connected, `true` by default */\n  connectNulls?: boolean;\n\n  /** Additional components that are rendered inside recharts `AreaChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `Area` component */\n  lineProps?:\n    | ((series: LineChartSeries) => Partial<Omit<LineProps, 'ref'>>)\n    | Partial<Omit<LineProps, 'ref'>>;\n}\n\nexport type LineChartFactory = Factory<{\n  props: LineChartProps;\n  ref: HTMLDivElement;\n  stylesNames: LineChartStylesNames;\n  vars: LineChartCssVariables;\n}>;\n\nconst defaultProps: Partial<LineChartProps> = {\n  withXAxis: true,\n  withYAxis: true,\n  withTooltip: true,\n  tooltipAnimationDuration: 0,\n  fillOpacity: 1,\n  tickLine: 'y',\n  strokeDasharray: '5 5',\n  gridAxis: 'x',\n  withDots: true,\n  connectNulls: true,\n  strokeWidth: 2,\n  curveType: 'monotone',\n};\n\nconst varsResolver = createVarsResolver<LineChartFactory>((theme, { textColor, gridColor }) => ({\n  root: {\n    '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n    '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n  },\n}));\n\nexport const LineChart = factory<LineChartFactory>((_props, ref) => {\n  const props = useProps('LineChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withLegend,\n    legendProps,\n    series,\n    onMouseLeave,\n    dataKey,\n    withTooltip,\n    withXAxis,\n    withYAxis,\n    gridAxis,\n    tickLine,\n    xAxisProps,\n    yAxisProps,\n    unit,\n    tooltipAnimationDuration,\n    strokeDasharray,\n    gridProps,\n    tooltipProps,\n    referenceLines,\n    withDots,\n    dotProps,\n    activeDotProps,\n    strokeWidth,\n    lineChartProps,\n    connectNulls,\n    fillOpacity,\n    curveType,\n    orientation,\n    dir,\n    valueFormatter,\n    children,\n    lineProps,\n    xAxisLabel,\n    yAxisLabel,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n  const withXTickLine = gridAxis !== 'none' && (tickLine === 'x' || tickLine === 'xy');\n  const withYTickLine = gridAxis !== 'none' && (tickLine === 'y' || tickLine === 'xy');\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n  const shouldHighlight = highlightedArea !== null;\n  const handleMouseLeave = (event: React.MouseEvent<HTMLDivElement>) => {\n    setHighlightedArea(null);\n    onMouseLeave?.(event);\n  };\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<LineChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const getStyles = useStyles<LineChartFactory>({\n    name: 'LineChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const lines = series.map((item) => {\n    const color = getThemeColor(item.color, theme);\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n\n    return (\n      <Line\n        {...getStyles('line')}\n        key={item.name}\n        name={item.name}\n        dataKey={item.name}\n        dot={\n          withDots\n            ? { fillOpacity: dimmed ? 0 : 1, strokeOpacity: dimmed ? 0 : 1, ...dotProps }\n            : false\n        }\n        activeDot={withDots ? { fill: color, stroke: color, ...activeDotProps } : false}\n        fill={color}\n        stroke={color}\n        strokeWidth={strokeWidth}\n        isAnimationActive={false}\n        fillOpacity={dimmed ? 0 : fillOpacity}\n        strokeOpacity={dimmed ? 0.5 : fillOpacity}\n        connectNulls={connectNulls}\n        type={curveType}\n        strokeDasharray={item.strokeDasharray}\n        {...(typeof lineProps === 'function' ? lineProps(item) : lineProps)}\n      />\n    );\n  });\n\n  const referenceLinesItems = referenceLines?.map((line, index) => {\n    const color = getThemeColor(line.color, theme);\n    return (\n      <ReferenceLine\n        key={index}\n        stroke={line.color ? color : 'var(--chart-grid-color)'}\n        strokeWidth={1}\n        {...line}\n        label={{\n          value: line.label,\n          fill: line.color ? color : 'currentColor',\n          fontSize: 12,\n          position: line.labelPosition ?? 'insideBottomLeft',\n        }}\n        {...getStyles('referenceLine')}\n      />\n    );\n  });\n\n  return (\n    <Box\n      ref={ref}\n      {...getStyles('root')}\n      onMouseLeave={handleMouseLeave}\n      dir={dir || 'ltr'}\n      {...others}\n    >\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsLineChart\n          data={data}\n          layout={orientation}\n          margin={{\n            bottom: xAxisLabel ? 30 : undefined,\n            left: yAxisLabel ? 10 : undefined,\n            right: yAxisLabel ? 5 : undefined,\n          }}\n          {...lineChartProps}\n        >\n          {withLegend && (\n            <Legend\n              verticalAlign=\"top\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'top'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                />\n              )}\n              {...legendProps}\n            />\n          )}\n\n          <XAxis\n            hide={!withXAxis}\n            {...(orientation === 'vertical' ? { type: 'number' } : { dataKey })}\n            tick={{ transform: 'translate(0, 10)', fontSize: 12, fill: 'currentColor' }}\n            stroke=\"\"\n            interval=\"preserveStartEnd\"\n            tickLine={withXTickLine ? { stroke: 'currentColor' } : false}\n            minTickGap={5}\n            {...getStyles('axis')}\n            {...xAxisProps}\n          >\n            {xAxisLabel && (\n              <Label position=\"insideBottom\" offset={-20} fontSize={12} {...getStyles('axisLabel')}>\n                {xAxisLabel}\n              </Label>\n            )}\n            {xAxisProps?.children}\n          </XAxis>\n\n          <YAxis\n            hide={!withYAxis}\n            axisLine={false}\n            {...(orientation === 'vertical' ? { dataKey, type: 'category' } : { type: 'number' })}\n            tickLine={withYTickLine ? { stroke: 'currentColor' } : false}\n            tick={{ transform: 'translate(-10, 0)', fontSize: 12, fill: 'currentColor' }}\n            allowDecimals\n            unit={unit}\n            tickFormatter={valueFormatter}\n            {...getStyles('axis')}\n            {...yAxisProps}\n          >\n            {yAxisLabel && (\n              <Label\n                position=\"insideLeft\"\n                angle={-90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {yAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          <CartesianGrid\n            strokeDasharray={strokeDasharray}\n            vertical={gridAxis === 'y' || gridAxis === 'xy'}\n            horizontal={gridAxis === 'x' || gridAxis === 'xy'}\n            {...getStyles('grid')}\n            {...gridProps}\n          />\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={tooltipAnimationDuration !== 0}\n              position={{ y: 0 }}\n              cursor={{\n                stroke: 'var(--chart-grid-color)',\n                strokeWidth: 1,\n                strokeDasharray,\n              }}\n              content={({ label, payload }) => (\n                <ChartTooltip\n                  label={label}\n                  payload={payload}\n                  unit={unit}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={series}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {lines}\n          {referenceLinesItems}\n          {children}\n        </ReChartsLineChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nLineChart.displayName = '@mantine/charts/LineChart';\nLineChart.classes = classes;\n",null],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,MAAM,eAAe;IACnB,WAAW;IACX,WAAW;IACX,aAAa;IACb,0BAA0B;IAC1B,aAAa;IACb,UAAU;IACV,iBAAiB;IACjB,UAAU;IACV,UAAU;IACV,cAAc;IACd,aAAa;IACb,WAAW;AACb;AACA,MAAM,eAAe,qPAAmB,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,GAAM,CAAA;QAC5E,MAAM;YACJ,sBAAsB,YAAY,8PAAc,WAAW,SAAS,KAAK;YACzE,sBAAsB,YAAY,8PAAc,WAAW,SAAS,KAAK;QAC1E;IACH,CAAC;AACW,MAAC,YAAY,mLAAQ,CAAC,QAAQ;IACxC,MAAM,QAAQ,iNAAS,aAAa,cAAc;IAClD,MAAM,EACJ,UAAU,EACV,SAAS,EACT,KAAK,EACL,MAAM,EACN,QAAQ,EACR,IAAI,EACJ,IAAI,EACJ,UAAU,EACV,WAAW,EACX,MAAM,EACN,YAAY,EACZ,OAAO,EACP,WAAW,EACX,SAAS,EACT,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,UAAU,EACV,UAAU,EACV,IAAI,EACJ,wBAAwB,EACxB,eAAe,EACf,SAAS,EACT,YAAY,EACZ,cAAc,EACd,QAAQ,EACR,QAAQ,EACR,cAAc,EACd,WAAW,EACX,cAAc,EACd,YAAY,EACZ,WAAW,EACX,SAAS,EACT,WAAW,EACX,GAAG,EACH,cAAc,EACd,QAAQ,EACR,SAAS,EACT,UAAU,EACV,UAAU,EACV,GAAG,QACJ,GAAG;IACJ,MAAM,QAAQ;IACd,MAAM,gBAAgB,aAAa,UAAM,CAAK,aAAa,OAAO,aAAa,IAAI;IACnF,MAAM,gBAAgB,aAAa,UAAM,CAAK,aAAa,OAAO,aAAa,IAAI;IACnF,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,4NAAS;IACvD,MAAM,kBAAkB,oBAAoB;IAC5C,MAAM,mBAAmB,CAAC;QACxB,mBAAmB;QACnB,eAAe;IACnB;IACE,MAAM,EAAE,kBAAkB,EAAE,cAAc,EAAE,GAAG,mQAAqB;QAClE;QACA;QACA;IACJ;IACE,MAAM,YAAY,kNAAU;QAC1B,MAAM;QACN,OAAO;QACP;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACJ;IACE,MAAM,QAAQ,OAAO,GAAG,CAAC,CAAC;QACxB,MAAM,QAAQ,8PAAc,KAAK,KAAK,EAAE;QACxC,MAAM,SAAS,mBAAmB,oBAAoB,KAAK,IAAI;QAC/D,OAAA,aAAA,GAAuB,2NAAM,aAAa,+JAExC;YACE,GAAG,UAAU,OAAO;YACpB,KAAK,KAAK,IAAI;YACd,MAAM,KAAK,IAAI;YACf,SAAS,KAAK,IAAI;YAClB,KAAK,WAAW;gBAAE,aAAa,SAAS,IAAI;gBAAG,eAAe,SAAS,IAAI;gBAAG,GAAG,QAAQ;YAAE,IAAG;YAC9F,WAAW,WAAW;gBAAE,MAAM;gBAAO,QAAQ;gBAAO,GAAG,cAAc;YAAA,IAAK;YAC1E,MAAM;YACN,QAAQ;YACR;YACA,mBAAmB;YACnB,aAAa,SAAS,IAAI;YAC1B,eAAe,SAAS,MAAM;YAC9B;YACA,MAAM;YACN,iBAAiB,KAAK,eAAe;YACrC,GAAG,OAAO,cAAc,aAAa,UAAU,QAAQ,SAAS;QACjE;IAEP;IACE,MAAM,sBAAsB,gBAAgB,IAAI,CAAC,MAAM;QACrD,MAAM,QAAQ,8PAAc,KAAK,KAAK,EAAE;QACxC,OAAA,aAAA,GAAuB,2NAAM,aAAa,iLAExC;YACE,KAAK;YACL,QAAQ,KAAK,KAAK,GAAG,QAAQ;YAC7B,aAAa;YACb,GAAG,IAAI;YACP,OAAO;gBACL,OAAO,KAAK,KAAK;gBACjB,MAAM,KAAK,KAAK,GAAG,QAAQ;gBAC3B,UAAU;gBACV,UAAU,KAAK,aAAa,IAAI;YACjC;YACD,GAAG,UAAU,gBAAgB;QAC9B;IAEP;IACE,OAAA,aAAA,GAAuB,2NAAM,aAAa,yKAExC;QACE;QACA,GAAG,UAAU,OAAO;QACpB,cAAc;QACd,KAAK,OAAO;QACZ,GAAG,MAAM;IACV,GACL,aAAA,GAAoB,2NAAM,aAAa,6LAAsB;QAAE,GAAG,UAAU,YAAY;IAAA,GAAoB,aAAA,GAAA,2NAAM,aAAa,qKAEzH;QACE;QACA,QAAQ;QACR,QAAQ;YACN,QAAQ,aAAa,KAAK,KAAK;YAC/B,MAAM,aAAa,KAAK,KAAK;YAC7B,OAAO,aAAa,IAAI,KAAK;QAC9B;QACD,GAAG,cAAc;IAClB,GACD,cAAU,aAAA,GAAoB,2NAAM,aAAa,mKAE/C;QACE,eAAe;QACf,SAAS,CAAC,UAA4B,aAAA,GAAA,2NAAM,aAAa,2LAEvD;gBACE,SAAS,QAAQ,OAAO;gBACxB,aAAa;gBACb,gBAAgB,aAAa,iBAAiB;gBAC9C,YAAY;gBACZ,QAAQ;gBACR;YACD;QAEH,GAAG,WAAW;IACf,IAEa,aAAA,GAAA,2NAAM,aAAa,iKAEjC;QACE,MAAM,CAAC;QACP,GAAG,gBAAgB,aAAa;YAAE,MAAM;QAAQ,IAAK;YAAE;QAAS,CAAA;QAChE,MAAM;YAAE,WAAW;YAAoB,UAAU;YAAI,MAAM;QAAgB;QAC3E,QAAQ;QACR,UAAU;QACV,UAAU,gBAAgB;YAAE,QAAQ;QAAgB,IAAG;QACvD,YAAY;QACZ,GAAG,UAAU,OAAO;QACpB,GAAG,UAAU;IACd,GACD,cAAU,aAAA,GAAoB,2NAAM,aAAa,iKAAQ;QAAE,UAAU;QAAgB,QAAQ,CAAC;QAAI,UAAU;QAAI,GAAG,UAAU,YAAY;IAAE,GAAE,aAC7I,YAAY,WAEE,aAAA,GAAA,2NAAM,aAAa,iKAEjC;QACE,MAAM,CAAC;QACP,UAAU;QACV,GAAG,gBAAgB,aAAa;YAAE;YAAS,MAAM;QAAY,IAAG;YAAE,MAAM;QAAU,CAAA;QAClF,UAAU,gBAAgB;YAAE,QAAQ;QAAgB,IAAG;QACvD,MAAM;YAAE,WAAW;YAAqB,UAAU;YAAI,MAAM;QAAgB;QAC5E,eAAe;QACf;QACA,eAAe;QACf,GAAG,UAAU,OAAO;QACpB,GAAG,UAAU;IACd,GACD,cAAU,aAAA,GAAoB,2NAAM,aAAa,iKAE/C;QACE,UAAU;QACV,OAAO,CAAC;QACR,YAAY;QACZ,UAAU;QACV,QAAQ,CAAC;QACT,GAAG,UAAU,YAAY;IAC1B,GACD,aAEF,YAAY,WAEE,aAAA,GAAA,2NAAM,aAAa,iLAEjC;QACE;QACA,UAAU,aAAa,OAAO,aAAa;QAC3C,YAAY,aAAa,OAAO,aAAa;QAC7C,GAAG,UAAU,OAAO;QACpB,GAAG,SAAS;IACb,IAEH,eAAW,aAAA,GAAoB,2NAAM,aAAa,qKAEhD;QACE,mBAAmB;QACnB,mBAAmB,6BAA6B;QAChD,UAAU;YAAE,GAAG;QAAG;QAClB,QAAQ;YACN,QAAQ;YACR,aAAa;YACb;QACD;QACD,SAAS,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,GAAA,aAAA,GAAqB,2NAAM,aAAa,8LAElE;gBACE;gBACA;gBACA;gBACA,YAAY;gBACZ,QAAQ;gBACR;gBACA;YACD;QAEH,GAAG,YAAY;IAChB,IAEH,OACA,qBACA;AAGN;AACA,UAAU,WAAW,GAAG;AACxB,UAAU,OAAO"}},
    {"offset": {"line": 1157, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1162, "column": 0}, "map": {"version":3,"sources":["../../src/Sparkline/Sparkline.tsx","/turbopack/[project]/node_modules/@mantine/charts/esm/Sparkline/Sparkline.mjs"],"sourcesContent":["import React, { useId, useMemo } from 'react';\nimport { Area, AreaProps, AreaChart as ReChartsAreaChart, ResponsiveContainer } from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport { AreaChartCurveType, AreaGradient } from '../AreaChart';\n\nconst classes = {};\n\nexport interface SparklineTrendColors {\n  positive: MantineColor;\n  negative: MantineColor;\n  neutral?: MantineColor;\n}\n\nexport type SparklineStylesNames = 'root';\nexport type SparklineCssVariables = {\n  root: '--chart-color';\n};\n\nexport interface SparklineProps\n  extends BoxProps,\n    StylesApiProps<SparklineFactory>,\n    ElementProps<'div'> {\n  /** Data used to render the chart */\n  data: number[];\n\n  /** Key of `theme.colors` or any valid CSS color, `theme.primaryColor` by default */\n  color?: MantineColor;\n\n  /** Determines whether the chart fill should be a gradient, `true` by default */\n  withGradient?: boolean;\n\n  /** Controls fill opacity of the area, `0.6` by default */\n  fillOpacity?: number;\n\n  /** Type of the curve, `'linear'` by default */\n  curveType?: AreaChartCurveType;\n\n  /** Area stroke width, `2` by default */\n  strokeWidth?: number;\n\n  /** If set, `color` prop is ignored and chart color is determined by the difference between first and last value. */\n  trendColors?: SparklineTrendColors;\n\n  /** Determines whether null values should be connected with other values, `true` by default */\n  connectNulls?: boolean;\n\n  /** Props passed down to the underlying recharts `Area` component */\n  areaProps?: Omit<AreaProps, 'data' | 'dataKey' | 'ref'>;\n}\n\nexport type SparklineFactory = Factory<{\n  props: SparklineProps;\n  ref: HTMLDivElement;\n  stylesNames: SparklineStylesNames;\n  vars: SparklineCssVariables;\n}>;\n\nconst defaultProps: Partial<SparklineProps> = {\n  withGradient: true,\n  connectNulls: true,\n  fillOpacity: 0.6,\n  strokeWidth: 2,\n  curveType: 'linear',\n};\n\nfunction getTrendColor(data: number[], trendColors: SparklineTrendColors) {\n  const first = data[0];\n  const last = data[data.length - 1];\n\n  if (first < last) {\n    return trendColors.positive;\n  }\n\n  if (first > last) {\n    return trendColors.negative;\n  }\n\n  return trendColors.neutral || trendColors.positive;\n}\n\nconst varsResolver = createVarsResolver<SparklineFactory>(\n  (theme, { color, data, trendColors }) => ({\n    root: {\n      '--chart-color': trendColors\n        ? getThemeColor(getTrendColor(data, trendColors), theme)\n        : color\n          ? getThemeColor(color, theme)\n          : undefined,\n    },\n  })\n);\n\nexport const Sparkline = factory<SparklineFactory>((_props, ref) => {\n  const props = useProps('Sparkline', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withGradient,\n    fillOpacity,\n    curveType,\n    strokeWidth,\n    trendColors,\n    connectNulls,\n    areaProps,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<SparklineFactory>({\n    name: 'Sparkline',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const id = useId();\n  const mappedData = useMemo(() => data.map((value, index) => ({ value, index })), [data]);\n\n  return (\n    <Box ref={ref} {...getStyles('root')} {...others} dir=\"ltr\">\n      <ResponsiveContainer>\n        <ReChartsAreaChart data={mappedData}>\n          <Area\n            dataKey=\"value\"\n            type={curveType}\n            fill={`url(#${id})`}\n            stroke=\"var(--chart-color, var(--mantine-color-blue-filled))\"\n            isAnimationActive={false}\n            connectNulls={connectNulls}\n            strokeWidth={strokeWidth}\n            fillOpacity={1}\n            {...areaProps}\n          />\n\n          <defs>\n            <AreaGradient\n              id={id}\n              color=\"var(--chart-color, var(--mantine-color-blue-filled))\"\n              fillOpacity={fillOpacity}\n              withGradient={withGradient}\n            />\n          </defs>\n        </ReChartsAreaChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nSparkline.displayName = '@mantine/charts/Sparkline';\nSparkline.classes = classes;\n",null],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAYA,MAAM,UAAU,CAAA;AAChB,MAAM,eAAe;IACnB,cAAc;IACd,cAAc;IACd,aAAa;IACb,aAAa;IACb,WAAW;AACb;AACA,SAAS,cAAc,IAAI,EAAE,WAAW;IACtC,MAAM,QAAQ,IAAI,CAAC,EAAE;IACrB,MAAM,OAAO,IAAI,CAAC,KAAK,MAAM,GAAG,EAAE;IAClC,IAAI,QAAQ,MAAM;QAChB,OAAO,YAAY,QAAQ;IAC5B;IACD,IAAI,QAAQ,MAAM;QAChB,OAAO,YAAY,QAAQ;IAC5B;IACD,OAAO,YAAY,OAAO,IAAI,YAAY,QAAQ;AACpD;AACA,MAAM,eAAe,qPACnB,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,WAAW,EAAE,GAAM,CAAA;QACxC,MAAM;YACJ,iBAAiB,cAAc,8PAAc,cAAc,MAAM,cAAc,SAAS,QAAQ,8PAAc,OAAO,SAAS,KAAK;QACpI;IACL,CAAG;AAES,MAAC,YAAY,mLAAQ,CAAC,QAAQ;IACxC,MAAM,QAAQ,iNAAS,aAAa,cAAc;IAClD,MAAM,EACJ,UAAU,EACV,SAAS,EACT,KAAK,EACL,MAAM,EACN,QAAQ,EACR,IAAI,EACJ,IAAI,EACJ,YAAY,EACZ,WAAW,EACX,SAAS,EACT,WAAW,EACX,WAAW,EACX,YAAY,EACZ,SAAS,EACT,GAAG,QACJ,GAAG;IACJ,MAAM,YAAY,kNAAU;QAC1B,MAAM;QACN;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACJ;IACE,MAAM,KAAK;IACX,MAAM,aAAa,2NAAQ,IAAM,KAAK,GAAG,CAAC,CAAC,OAAO,QAAK,CAAM;gBAAE;gBAAO;YAAO,CAAA,IAAI;QAAC;KAAK;IACvF,OAAA,aAAA,GAAuB,2NAAM,aAAa,yKAAM;QAAE;QAAK,GAAG,UAAU,OAAO;QAAE,GAAG,MAAM;QAAE,KAAK;IAAK,GAAE,aAAA,GAAkB,2NAAM,aAAa,6LAAsB,MAAI,aAAA,GAAkB,2NAAM,aAAa,qKAAoB;QAAE,MAAM;IAAY,GAAA,aAAA,GAAkB,2NAAM,aAAa,+JAEnR;QACE,SAAS;QACT,MAAM;QACN,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACnB,QAAQ;QACR,mBAAmB;QACnB;QACA;QACA,aAAa;QACb,GAAG,SAAS;IACb,IACF,aAAA,GAAkB,2NAAM,aAAa,CAAC,QAAQ,MAAI,aAAA,GAAkB,2NAAM,aAAa,2LAEtF;QACE;QACA,OAAO;QACP;QACA;IACD;AAEL;AACA,UAAU,WAAW,GAAG;AACxB,UAAU,OAAO,GAAG"}},
    {"offset": {"line": 1259, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1264, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@mantine/charts/esm/DonutChart/DonutChart.module.css.mjs"],"names":[],"mappings":""}},
    {"offset": {"line": 1274, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1279, "column": 0}, "map": {"version":3,"sources":["../../src/DonutChart/DonutChart.tsx","/turbopack/[project]/node_modules/@mantine/charts/esm/DonutChart/DonutChart.mjs"],"sourcesContent":["import React from 'react';\nimport {\n  Cell,\n  Pie,\n  PieProps,\n  PieChart as ReChartsPieChart,\n  ResponsiveContainer,\n  Tooltip,\n  TooltipProps,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  rem,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartTooltip } from '../ChartTooltip/ChartTooltip';\nimport classes from './DonutChart.module.css';\n\nexport interface DonutChartCell {\n  name: string;\n  value: number;\n  color: MantineColor;\n}\n\nexport type DonutChartStylesNames = 'root' | 'label';\nexport type DonutChartCssVariables = {\n  root: '--chart-stroke-color' | '--chart-labels-color' | '--chart-size';\n};\n\nexport interface DonutChartProps\n  extends BoxProps,\n    StylesApiProps<DonutChartFactory>,\n    ElementProps<'div'> {\n  /** Data used to render chart */\n  data: DonutChartCell[];\n\n  /** Determines whether the tooltip should be displayed when one of the section is hovered, `true` by default */\n  withTooltip?: boolean;\n\n  /** Tooltip animation duration in ms, `0` by default */\n  tooltipAnimationDuration?: number;\n\n  /** Props passed down to `Tooltip` recharts component */\n  tooltipProps?: Omit<TooltipProps<any, any>, 'ref'>;\n\n  /** Props passed down to recharts `Pie` component */\n  pieProps?: Omit<PieProps, 'ref'>;\n\n  /** Controls color of the segments stroke, by default depends on color scheme */\n  strokeColor?: MantineColor;\n\n  /** Controls text color of all labels, by default depends on color scheme */\n  labelColor?: MantineColor;\n\n  /** Controls padding between segments, `0` by default */\n  paddingAngle?: number;\n\n  /** Determines whether each segment should have associated label, `false` by default */\n  withLabels?: boolean;\n\n  /** Determines whether segments labels should have lines that connect the segment with the label, `true` by default */\n  withLabelsLine?: boolean;\n\n  /** Controls thickness of the chart segments, `20` by default */\n  thickness?: number;\n\n  /** Controls chart width and height, height is increased by 40 if `withLabels` prop is set. Cannot be less than `thickness`. `80` by default */\n  size?: number;\n\n  /** Controls width of segments stroke, `1` by default */\n  strokeWidth?: number;\n\n  /** Controls angle at which chart starts, `0` by default. Set to `180` to render the chart as semicircle. */\n  startAngle?: number;\n\n  /** Controls angle at which charts ends, `360` by default. Set to `0` to render the chart as semicircle. */\n  endAngle?: number;\n\n  /** Determines which data is displayed in the tooltip. `'all'` – display all values, `'segment'` – display only hovered segment. `'all'` by default. */\n  tooltipDataSource?: 'segment' | 'all';\n\n  /** Chart label, displayed in the center of the chart */\n  chartLabel?: string | number;\n\n  /** Additional elements rendered inside `PieChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `PieChart` component */\n  pieChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsPieChart>;\n\n  /** A function to format values inside the tooltip */\n  valueFormatter?: (value: number) => string;\n}\n\nexport type DonutChartFactory = Factory<{\n  props: DonutChartProps;\n  ref: HTMLDivElement;\n  stylesNames: DonutChartStylesNames;\n  vars: DonutChartCssVariables;\n}>;\n\nconst defaultProps: Partial<DonutChartProps> = {\n  withTooltip: true,\n  withLabelsLine: true,\n  paddingAngle: 0,\n  thickness: 20,\n  size: 160,\n  strokeWidth: 1,\n  startAngle: 0,\n  endAngle: 360,\n  tooltipDataSource: 'all',\n};\n\nconst varsResolver = createVarsResolver<DonutChartFactory>(\n  (theme, { strokeColor, labelColor, withLabels, size }) => ({\n    root: {\n      '--chart-stroke-color': strokeColor ? getThemeColor(strokeColor, theme) : undefined,\n      '--chart-labels-color': labelColor ? getThemeColor(labelColor, theme) : undefined,\n      '--chart-size': withLabels ? rem(size! + 80) : rem(size!),\n    },\n  })\n);\n\nexport const DonutChart = factory<DonutChartFactory>((_props, ref) => {\n  const props = useProps('DonutChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withTooltip,\n    tooltipAnimationDuration,\n    tooltipProps,\n    pieProps,\n    paddingAngle,\n    withLabels,\n    withLabelsLine,\n    size,\n    thickness,\n    strokeWidth,\n    startAngle,\n    endAngle,\n    tooltipDataSource,\n    chartLabel,\n    children,\n    pieChartProps,\n    valueFormatter,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n\n  const getStyles = useStyles<DonutChartFactory>({\n    name: 'DonutChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<DonutChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const cells = data.map((item, index) => (\n    <Cell\n      key={index}\n      fill={getThemeColor(item.color, theme)}\n      stroke=\"var(--chart-stroke-color, var(--mantine-color-body))\"\n      strokeWidth={strokeWidth}\n    />\n  ));\n\n  return (\n    <Box ref={ref} size={size} {...getStyles('root')} {...others}>\n      <ResponsiveContainer>\n        <ReChartsPieChart {...pieChartProps}>\n          <Pie\n            data={data}\n            innerRadius={size! / 2 - thickness!}\n            outerRadius={size! / 2}\n            dataKey=\"value\"\n            isAnimationActive={false}\n            paddingAngle={paddingAngle}\n            startAngle={startAngle}\n            endAngle={endAngle}\n            label={\n              withLabels\n                ? {\n                    fill: 'var(--chart-labels-color, var(--mantine-color-dimmed))',\n                    fontSize: 12,\n                    fontFamily: 'var(--mantine-font-family)',\n                  }\n                : false\n            }\n            labelLine={\n              withLabelsLine\n                ? {\n                    stroke: 'var(--chart-label-color, var(--mantine-color-dimmed))',\n                    strokeWidth: 1,\n                  }\n                : false\n            }\n            {...pieProps}\n          >\n            {cells}\n          </Pie>\n\n          {chartLabel && (\n            <text\n              x=\"50%\"\n              y=\"50%\"\n              textAnchor=\"middle\"\n              dominantBaseline=\"middle\"\n              {...getStyles('label')}\n            >\n              {chartLabel}\n            </text>\n          )}\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={false}\n              content={({ payload }) => (\n                <ChartTooltip\n                  payload={data}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  type=\"radial\"\n                  segmentId={tooltipDataSource === 'segment' ? payload?.[0]?.name : undefined}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {children}\n        </ReChartsPieChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nDonutChart.displayName = '@mantine/charts/DonutChart';\nDonutChart.classes = classes;\n",null],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAM,eAAe;IACnB,aAAa;IACb,gBAAgB;IAChB,cAAc;IACd,WAAW;IACX,MAAM;IACN,aAAa;IACb,YAAY;IACZ,UAAU;IACV,mBAAmB;AACrB;AACA,MAAM,eAAe,qPACnB,CAAC,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,IAAI,EAAE,GAAM,CAAA;QACzD,MAAM;YACJ,wBAAwB,cAAc,8PAAc,aAAa,SAAS,KAAK;YAC/E,wBAAwB,aAAa,8PAAc,YAAY,SAAS,KAAK;YAC7E,gBAAgB,aAAa,gMAAI,OAAO,MAAM,gMAAI;QACnD;IACL,CAAG;AAES,MAAC,aAAa,mLAAQ,CAAC,QAAQ;IACzC,MAAM,QAAQ,iNAAS,cAAc,cAAc;IACnD,MAAM,EACJ,UAAU,EACV,SAAS,EACT,KAAK,EACL,MAAM,EACN,QAAQ,EACR,IAAI,EACJ,IAAI,EACJ,WAAW,EACX,wBAAwB,EACxB,YAAY,EACZ,QAAQ,EACR,YAAY,EACZ,UAAU,EACV,cAAc,EACd,IAAI,EACJ,SAAS,EACT,WAAW,EACX,UAAU,EACV,QAAQ,EACR,iBAAiB,EACjB,UAAU,EACV,QAAQ,EACR,aAAa,EACb,cAAc,EACd,GAAG,QACJ,GAAG;IACJ,MAAM,QAAQ;IACd,MAAM,YAAY,kNAAU;QAC1B,MAAM;QACN,OAAO;QACP;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACJ;IACE,MAAM,EAAE,kBAAkB,EAAE,cAAc,EAAE,GAAG,mQAAqB;QAClE;QACA;QACA;IACJ;IACE,MAAM,QAAQ,KAAK,GAAG,CAAC,CAAC,MAAM,QAA0B,aAAA,GAAA,2NAAM,aAAa,+JAEzE;YACE,KAAK;YACL,MAAM,8PAAc,KAAK,KAAK,EAAE;YAChC,QAAQ;YACR;QACD;IAEH,OAAA,aAAA,GAAuB,2NAAM,aAAa,yKAAM;QAAE;QAAK;QAAM,GAAG,UAAU,OAAO;QAAE,GAAG,MAAM;IAAA,GAAE,aAAA,GAAkB,2NAAM,aAAa,6LAAsB,MAAI,aAAA,GAAkB,2NAAM,aAAa,mKAAmB;QAAE,GAAG,aAAa;IAAA,GAAoB,aAAA,GAAA,2NAAM,aAAa,yJAE5Q;QACE;QACA,aAAa,OAAO,IAAI;QACxB,aAAa,OAAO;QACpB,SAAS;QACT,mBAAmB;QACnB;QACA;QACA;QACA,OAAO,aAAa;YAClB,MAAM;YACN,UAAU;YACV,YAAY;QACpB,IAAU;QACJ,WAAW,iBAAiB;YAC1B,QAAQ;YACR,aAAa;QACrB,IAAU;QACJ,GAAG,QAAQ;IACZ,GACD,QACC,cAA8B,aAAA,GAAA,2NAAM,aAAa,CAClD,QACA;QACE,GAAG;QACH,GAAG;QACH,YAAY;QACZ,kBAAkB;QAClB,GAAG,UAAU,QAAQ;IACtB,GACD,aACC,eAA+B,aAAA,GAAA,2NAAM,aAAa,qKAEnD;QACE,mBAAmB;QACnB,mBAAmB;QACnB,SAAS,CAAC,EAAE,OAAO,EAAE,GAAA,aAAA,GAAqB,2NAAM,aAAa,8LAE3D;gBACE,SAAS;gBACT,YAAY;gBACZ,QAAQ;gBACR,MAAM;gBACN,WAAW,sBAAsB,YAAY,SAAU,CAAA,EAAE,EAAE,OAAO,KAAK;gBACvE;YACD;QAEH,GAAG,YAAY;IAChB,IACA;AACL;AACA,WAAW,WAAW,GAAG;AACzB,WAAW,OAAO"}},
    {"offset": {"line": 1402, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1407, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@mantine/charts/esm/PieChart/PieChart.module.css.mjs"],"names":[],"mappings":""}},
    {"offset": {"line": 1417, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1422, "column": 0}, "map": {"version":3,"sources":["../../src/PieChart/PieChart.tsx","/turbopack/[project]/node_modules/@mantine/charts/esm/PieChart/PieChart.mjs"],"sourcesContent":["import React from 'react';\nimport {\n  Cell,\n  Pie,\n  PieLabel,\n  PieProps,\n  PieChart as ReChartsPieChart,\n  ResponsiveContainer,\n  Tooltip,\n  TooltipProps,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  rem,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartTooltip } from '../ChartTooltip/ChartTooltip';\nimport classes from './PieChart.module.css';\n\nexport interface PieChartCell {\n  name: string;\n  value: number;\n  color: MantineColor;\n}\n\nexport type PieChartStylesNames = 'root';\nexport type PieChartCssVariables = {\n  root: '--chart-stroke-color' | '--chart-labels-color' | '--chart-size';\n};\n\nexport interface PieChartProps\n  extends BoxProps,\n    StylesApiProps<PieChartFactory>,\n    ElementProps<'div'> {\n  /** Data used to render chart */\n  data: PieChartCell[];\n\n  /** Determines whether the tooltip should be displayed when one of the section is hovered, `true` by default */\n  withTooltip?: boolean;\n\n  /** Tooltip animation duration in ms, `0` by default */\n  tooltipAnimationDuration?: number;\n\n  /** Props passed down to `Tooltip` recharts component */\n  tooltipProps?: Omit<TooltipProps<any, any>, 'ref'>;\n\n  /** Props passed down to recharts `Pie` component */\n  pieProps?: Omit<PieProps, 'ref'>;\n\n  /** Controls color of the segments stroke, by default depends on color scheme */\n  strokeColor?: MantineColor;\n\n  /** Controls text color of all labels, white by default */\n  labelColor?: MantineColor;\n\n  /** Controls padding between segments, `0` by default */\n  paddingAngle?: number;\n\n  /** Determines whether each segment should have associated label, `false` by default */\n  withLabels?: boolean;\n\n  /** Determines whether segments labels should have lines that connect the segment with the label, `true` by default */\n  withLabelsLine?: boolean;\n\n  /** Controls chart width and height, height is increased by 40 if `withLabels` prop is set. Cannot be less than `thickness`. `80` by default */\n  size?: number;\n\n  /** Controls width of segments stroke, `1` by default */\n  strokeWidth?: number;\n\n  /** Controls angle at which chart starts, `0` by default. Set to `180` to render the chart as semicircle. */\n  startAngle?: number;\n\n  /** Controls angle at which charts ends, `360` by default. Set to `0` to render the chart as semicircle. */\n  endAngle?: number;\n\n  /** Determines which data is displayed in the tooltip. `'all'` – display all values, `'segment'` – display only hovered segment. `'all'` by default. */\n  tooltipDataSource?: 'segment' | 'all';\n\n  /** Additional elements rendered inside `PieChart` component */\n  children?: React.ReactNode;\n\n  /** Props passed down to recharts `PieChart` component */\n  pieChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsPieChart>;\n\n  /** Controls labels position relative to the segment, `'outside'` by default */\n  labelsPosition?: 'inside' | 'outside';\n\n  /** Type of labels to display, `'value'` by default */\n  labelsType?: 'value' | 'percent';\n\n  /** A function to format values inside the tooltip */\n  valueFormatter?: (value: number) => string;\n}\n\nexport type PieChartFactory = Factory<{\n  props: PieChartProps;\n  ref: HTMLDivElement;\n  stylesNames: PieChartStylesNames;\n  vars: PieChartCssVariables;\n}>;\n\nconst defaultProps: Partial<PieChartProps> = {\n  withTooltip: false,\n  withLabelsLine: true,\n  paddingAngle: 0,\n  size: 160,\n  strokeWidth: 1,\n  startAngle: 0,\n  endAngle: 360,\n  tooltipDataSource: 'all',\n  labelsPosition: 'outside',\n  labelsType: 'value',\n};\n\nconst varsResolver = createVarsResolver<PieChartFactory>(\n  (theme, { strokeColor, labelColor, withLabels, size, labelsPosition }) => ({\n    root: {\n      '--chart-stroke-color': strokeColor ? getThemeColor(strokeColor, theme) : undefined,\n      '--chart-labels-color': labelColor ? getThemeColor(labelColor, theme) : undefined,\n      '--chart-size': withLabels && labelsPosition === 'outside' ? rem(size! + 80) : rem(size!),\n    },\n  })\n);\n\nconst getInsideLabel =\n  (labelsType: 'value' | 'percent'): PieLabel =>\n  ({ cx, cy, midAngle, innerRadius, outerRadius, value, percent }) => {\n    const RADIAN = Math.PI / 180;\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        textAnchor={x > cx ? 'start' : 'end'}\n        dominantBaseline=\"central\"\n        className={classes.label}\n      >\n        {labelsType === 'percent' ? `${(percent * 100).toFixed(0)}%` : value}\n      </text>\n    );\n  };\n\nexport const PieChart = factory<PieChartFactory>((_props, ref) => {\n  const props = useProps('PieChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    withTooltip,\n    tooltipAnimationDuration,\n    tooltipProps,\n    pieProps,\n    paddingAngle,\n    withLabels,\n    withLabelsLine,\n    size,\n    strokeWidth,\n    startAngle,\n    endAngle,\n    tooltipDataSource,\n    children,\n    pieChartProps,\n    labelsPosition,\n    valueFormatter,\n    labelsType,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n\n  const getStyles = useStyles<PieChartFactory>({\n    name: 'PieChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<PieChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const cells = data.map((item, index) => (\n    <Cell\n      key={index}\n      fill={getThemeColor(item.color, theme)}\n      stroke=\"var(--chart-stroke-color, var(--mantine-color-body))\"\n      strokeWidth={strokeWidth}\n    />\n  ));\n\n  return (\n    <Box ref={ref} size={size} {...getStyles('root')} {...others}>\n      <ResponsiveContainer>\n        <ReChartsPieChart {...pieChartProps}>\n          <Pie\n            data={data}\n            innerRadius={0}\n            outerRadius={size! / 2}\n            dataKey=\"value\"\n            isAnimationActive={false}\n            paddingAngle={paddingAngle}\n            startAngle={startAngle}\n            endAngle={endAngle}\n            label={\n              withLabels\n                ? labelsPosition === 'inside'\n                  ? getInsideLabel(labelsType || 'value')\n                  : labelsType === 'percent'\n                    ? ({ percent, x, y, cx, cy }) => (\n                        <text\n                          x={x}\n                          y={y}\n                          cx={cx}\n                          cy={cy}\n                          textAnchor={x > cx ? 'start' : 'end'}\n                          dominantBaseline=\"central\"\n                          fill=\"var(--chart-labels-color, var(--mantine-color-dimmed))\"\n                          fontFamily=\"var(--mantine-font-family)\"\n                          fontSize={12}\n                        >\n                          <tspan x={x}>{`${(percent * 100).toFixed(0)}%`}</tspan>\n                        </text>\n                      )\n                    : {\n                        fill: 'var(--chart-labels-color, var(--mantine-color-dimmed))',\n                        fontSize: 12,\n                        fontFamily: 'var(--mantine-font-family)',\n                      }\n                : false\n            }\n            labelLine={\n              withLabelsLine && labelsPosition === 'outside'\n                ? {\n                    stroke: 'var(--chart-label-color, var(--mantine-color-dimmed))',\n                    strokeWidth: 1,\n                  }\n                : false\n            }\n            {...pieProps}\n          >\n            {cells}\n          </Pie>\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={false}\n              content={({ payload }) => (\n                <ChartTooltip\n                  payload={data}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  type=\"radial\"\n                  segmentId={tooltipDataSource === 'segment' ? payload?.[0]?.name : undefined}\n                  valueFormatter={valueFormatter}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {children}\n        </ReChartsPieChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nPieChart.displayName = '@mantine/charts/PieChart';\nPieChart.classes = classes;\n",null],"names":[],"mappings":"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"}},
    {"offset": {"line": 1565, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1570, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@mantine/charts/esm/RadarChart/RadarChart.module.css.mjs"],"names":[],"mappings":""}},
    {"offset": {"line": 1580, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1585, "column": 0}, "map": {"version":3,"sources":["../../src/RadarChart/RadarChart.tsx","/turbopack/[project]/node_modules/@mantine/charts/esm/RadarChart/RadarChart.mjs"],"sourcesContent":["import React from 'react';\nimport {\n  PolarAngleAxis,\n  PolarAngleAxisProps,\n  PolarGrid,\n  PolarGridProps,\n  PolarRadiusAxis,\n  PolarRadiusAxisProps,\n  Radar,\n  RadarProps,\n  RadarChart as ReChartsRadarChart,\n  ResponsiveContainer,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport classes from './RadarChart.module.css';\n\nexport interface RadarChartSeries {\n  name: string;\n  color: MantineColor;\n  strokeColor?: MantineColor;\n  opacity?: number;\n}\n\nexport type RadarChartStylesNames = 'root' | 'container';\nexport type RadarChartCssVariables = {\n  root: '--chart-grid-color' | '--chart-text-color';\n};\n\nexport interface RadarChartProps\n  extends BoxProps,\n    StylesApiProps<RadarChartFactory>,\n    ElementProps<'div'> {\n  /** Data used in the chart */\n  data: Record<string, any>[];\n\n  /** Determines which data should be consumed from the `data` array. */\n  series: RadarChartSeries[];\n\n  /** Key of the `data` object for axis values */\n  dataKey: string;\n\n  /** Controls color of the grid lines. By default, color depends on the color scheme. */\n  gridColor?: MantineColor;\n\n  /** Controls color of all text elements. By default, color depends on the color scheme. */\n  textColor?: MantineColor;\n\n  /** Determines whether PolarGrid component should be displayed, `true` by default. */\n  withPolarGrid?: boolean;\n\n  /** Determines whether PolarAngleAxis component should be displayed, `true` by default */\n  withPolarAngleAxis?: boolean;\n\n  /** Determines whether PolarRadiusAxisProps component should be displayed, `false` by default */\n  withPolarRadiusAxis?: boolean;\n\n  /** Props passed down to recharts Radar component */\n  radarProps?: ((series: RadarChartSeries) => Omit<RadarProps, 'ref'>) | Omit<RadarProps, 'ref'>;\n\n  /** Props passed down to recharts RadarChart component */\n  radarChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsRadarChart>;\n\n  /** Props passed down to recharts PolarGrid component */\n  polarGridProps?: Omit<PolarGridProps, 'ref'>;\n\n  /** Props passed down to recharts PolarAngleAxis component */\n  polarAngleAxisProps?: Omit<PolarAngleAxisProps, 'ref'>;\n\n  /** Props passed down to recharts PolarRadiusAxis component */\n  polarRadiusAxisProps?: Omit<PolarRadiusAxisProps, 'ref'>;\n\n  /** Additional components that are rendered inside recharts `RadarChart` component */\n  children?: React.ReactNode;\n}\n\nexport type RadarChartFactory = Factory<{\n  props: RadarChartProps;\n  ref: HTMLDivElement;\n  stylesNames: RadarChartStylesNames;\n  vars: RadarChartCssVariables;\n}>;\n\nconst defaultProps: Partial<RadarChartProps> = {\n  withPolarGrid: true,\n  withPolarAngleAxis: true,\n  withPolarRadiusAxis: false,\n};\n\nconst varsResolver = createVarsResolver<RadarChartFactory>((theme, { gridColor, textColor }) => ({\n  root: {\n    '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n    '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n  },\n}));\n\nexport const RadarChart = factory<RadarChartFactory>((_props, ref) => {\n  const props = useProps('RadarChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    data,\n    series,\n    dataKey,\n    gridColor,\n    textColor,\n    radarProps,\n    radarChartProps,\n    polarGridProps,\n    polarAngleAxisProps,\n    polarRadiusAxisProps,\n    withPolarGrid,\n    withPolarAngleAxis,\n    withPolarRadiusAxis,\n    children,\n    ...others\n  } = props;\n\n  const theme = useMantineTheme();\n\n  const getStyles = useStyles<RadarChartFactory>({\n    name: 'RadarChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const radars = series.map((item, index) => (\n    <Radar\n      key={index}\n      name={item.name}\n      dataKey={item.name}\n      stroke={getThemeColor(item.strokeColor || item.color, theme)}\n      fill={getThemeColor(item.color, theme)}\n      fillOpacity={item.opacity || 0.4}\n      isAnimationActive={false}\n      {...(typeof radarProps === 'function' ? radarProps(item) : radarProps)}\n    />\n  ));\n\n  return (\n    <Box ref={ref} {...getStyles('root')} {...others}>\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsRadarChart data={data} {...radarChartProps}>\n          {withPolarGrid && <PolarGrid stroke=\"var(--chart-grid-color)\" {...polarGridProps} />}\n          {withPolarAngleAxis && <PolarAngleAxis dataKey={dataKey} {...polarAngleAxisProps} />}\n          {withPolarRadiusAxis && (\n            <PolarRadiusAxis stroke=\"var(--chart-grid-color)\" {...polarRadiusAxisProps} />\n          )}\n          {radars}\n          {children}\n        </ReChartsRadarChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nRadarChart.displayName = '@mantine/charts/RadarChart';\nRadarChart.classes = classes;\n",null],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAM,eAAe;IACnB,eAAe;IACf,oBAAoB;IACpB,qBAAqB;AACvB;AACA,MAAM,eAAe,qPAAmB,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,GAAM,CAAA;QAC5E,MAAM;YACJ,sBAAsB,YAAY,8PAAc,WAAW,SAAS,KAAK;YACzE,sBAAsB,YAAY,8PAAc,WAAW,SAAS,KAAK;QAC1E;IACH,CAAC;AACW,MAAC,aAAa,mLAAQ,CAAC,QAAQ;IACzC,MAAM,QAAQ,iNAAS,cAAc,cAAc;IACnD,MAAM,EACJ,UAAU,EACV,SAAS,EACT,KAAK,EACL,MAAM,EACN,QAAQ,EACR,IAAI,EACJ,IAAI,EACJ,MAAM,EACN,OAAO,EACP,SAAS,EACT,SAAS,EACT,UAAU,EACV,eAAe,EACf,cAAc,EACd,mBAAmB,EACnB,oBAAoB,EACpB,aAAa,EACb,kBAAkB,EAClB,mBAAmB,EACnB,QAAQ,EACR,GAAG,QACJ,GAAG;IACJ,MAAM,QAAQ;IACd,MAAM,YAAY,kNAAU;QAC1B,MAAM;QACN,OAAO;QACP;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACJ;IACE,MAAM,SAAS,OAAO,GAAG,CAAC,CAAC,MAAM,QAA0B,aAAA,GAAA,2NAAM,aAAa,6JAE5E;YACE,KAAK;YACL,MAAM,KAAK,IAAI;YACf,SAAS,KAAK,IAAI;YAClB,QAAQ,8PAAc,KAAK,WAAW,IAAI,KAAK,KAAK,EAAE;YACtD,MAAM,8PAAc,KAAK,KAAK,EAAE;YAChC,aAAa,KAAK,OAAO,IAAI;YAC7B,mBAAmB;YACnB,GAAG,OAAO,eAAe,aAAa,WAAW,QAAQ,UAAU;QACpE;IAEH,OAAA,aAAA,GAAuB,2NAAM,aAAa,yKAAM;QAAE;QAAK,GAAG,UAAU,OAAO;QAAE,GAAG,MAAM;IAAA,GAAoB,aAAA,GAAA,2NAAM,aAAa,6LAAsB;QAAE,GAAG,UAAU,YAAY;IAAE,GAAA,aAAA,GAAkB,2NAAM,aAAa,uKAAqB;QAAE;QAAM,GAAG,eAAe;IAAA,GAAI,iBAAiC,aAAA,GAAA,2NAAM,aAAa,qKAAY;QAAE,QAAQ;QAA2B,GAAG,cAAc;IAAA,IAAK,sBAAsC,aAAA,GAAA,2NAAM,aAAa,+KAAiB;QAAE;QAAS,GAAG,mBAAmB;IAAA,IAAK,uBAAuC,aAAA,GAAA,2NAAM,aAAa,iLAAkB;QAAE,QAAQ;QAA2B,GAAG,oBAAoB;IAAE,IAAG,QAAQ;AAC1oB;AACA,WAAW,WAAW,GAAG;AACzB,WAAW,OAAO"}},
    {"offset": {"line": 1671, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1676, "column": 0}, "map": {"version":3,"sources":["../../src/ScatterChart/ScatterChart.tsx","/turbopack/[project]/node_modules/@mantine/charts/esm/ScatterChart/ScatterChart.mjs"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  CartesianGrid,\n  Label,\n  Legend,\n  ScatterChart as ReChartsScatterChart,\n  ReferenceLine,\n  ResponsiveContainer,\n  Scatter,\n  ScatterProps,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getThemeColor,\n  MantineColor,\n  StylesApiProps,\n  useMantineTheme,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { ChartLegend, ChartLegendStylesNames } from '../ChartLegend';\nimport { ChartTooltip, ChartTooltipStylesNames } from '../ChartTooltip';\nimport { BaseChartStylesNames, GridChartBaseProps } from '../types';\nimport classes from '../grid-chart.module.css';\n\nexport interface ScatterChartSeries {\n  color: MantineColor;\n  name: string;\n  data: Record<string, number>[];\n}\n\nexport type ScatterChartStylesNames =\n  | 'scatter'\n  | BaseChartStylesNames\n  | ChartLegendStylesNames\n  | ChartTooltipStylesNames;\n\nexport type ScatterChartCssVariables = {\n  root: '--chart-text-color' | '--chart-grid-color';\n};\n\nexport interface ScatterChartProps\n  extends Omit<GridChartBaseProps, 'dataKey' | 'data' | 'unit' | 'valueFormatter'>,\n    BoxProps,\n    StylesApiProps<ScatterChartFactory>,\n    ElementProps<'div'> {\n  /** Keys that should be used to retrieve data from the data array on x and y axis */\n  dataKey: { x: string; y: string };\n\n  /** Data that is used to build the chart */\n  data: ScatterChartSeries[];\n\n  /** Units displayed after value on axis and inside the tooltip */\n  unit?: { x?: string; y?: string };\n\n  /** Labels that should be used instead of keys names in the tooltip */\n  labels?: { x?: string; y?: string };\n\n  /** A function to format values on x/y axis and in the tooltip */\n  valueFormatter?:\n    | GridChartBaseProps['valueFormatter']\n    | { x?: GridChartBaseProps['valueFormatter']; y?: GridChartBaseProps['valueFormatter'] };\n\n  /** Props passed down to recharts `ScatterChart` component */\n  scatterChartProps?: React.ComponentPropsWithoutRef<typeof ReChartsScatterChart>;\n\n  /** Props passed down to recharts `Scatter` component */\n  scatterProps?: Omit<ScatterProps, 'ref'>;\n}\n\nfunction getAxis(key: string, dataKey: { x: string; y: string }) {\n  return key === dataKey.x ? 'x' : 'y';\n}\n\nexport type ScatterChartFactory = Factory<{\n  props: ScatterChartProps;\n  ref: HTMLDivElement;\n  stylesNames: ScatterChartStylesNames;\n  vars: ScatterChartCssVariables;\n}>;\n\nconst defaultProps: Partial<ScatterChartProps> = {\n  withXAxis: true,\n  withYAxis: true,\n  withTooltip: true,\n  tooltipAnimationDuration: 0,\n  tickLine: 'y',\n  strokeDasharray: '5 5',\n  gridAxis: 'x',\n};\n\nconst varsResolver = createVarsResolver<ScatterChartFactory>((theme, { textColor, gridColor }) => ({\n  root: {\n    '--chart-text-color': textColor ? getThemeColor(textColor, theme) : undefined,\n    '--chart-grid-color': gridColor ? getThemeColor(gridColor, theme) : undefined,\n  },\n}));\n\nexport const ScatterChart = factory<ScatterChartFactory>((_props, ref) => {\n  const props = useProps('ScatterChart', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    referenceLines,\n    dir,\n    withLegend,\n    withTooltip,\n    withXAxis,\n    withYAxis,\n    xAxisProps,\n    yAxisProps,\n    orientation,\n    scatterChartProps,\n    legendProps,\n    data,\n    gridAxis,\n    tickLine,\n    strokeDasharray,\n    gridProps,\n    tooltipAnimationDuration,\n    tooltipProps,\n    children,\n    onMouseLeave,\n    dataKey,\n    textColor,\n    gridColor,\n    xAxisLabel,\n    yAxisLabel,\n    unit,\n    labels,\n    valueFormatter,\n    scatterProps,\n    ...others\n  } = props;\n\n  const getFormatter = (axis: 'x' | 'y') =>\n    typeof valueFormatter === 'function' ? valueFormatter : valueFormatter?.[axis];\n  const xFormatter = getFormatter('x');\n  const yFormatter = getFormatter('y');\n\n  const theme = useMantineTheme();\n\n  const mappedData = data.map((item) => ({\n    ...item,\n    data: item.data.map((point) => ({ ...point, name: item.name })),\n  }));\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<ScatterChartFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const getStyles = useStyles<ScatterChartFactory>({\n    name: 'ScatterChart',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const withXTickLine = gridAxis !== 'none' && (tickLine === 'x' || tickLine === 'xy');\n  const withYTickLine = gridAxis !== 'none' && (tickLine === 'y' || tickLine === 'xy');\n  const [highlightedArea, setHighlightedArea] = useState<string | null>(null);\n  const shouldHighlight = highlightedArea !== null;\n  const handleMouseLeave = (event: React.MouseEvent<HTMLDivElement>) => {\n    setHighlightedArea(null);\n    onMouseLeave?.(event);\n  };\n\n  const referenceLinesItems = referenceLines?.map((line, index) => {\n    const color = getThemeColor(line.color, theme);\n    return (\n      <ReferenceLine\n        key={index}\n        stroke={line.color ? color : 'var(--chart-grid-color)'}\n        strokeWidth={1}\n        {...line}\n        label={{\n          value: line.label,\n          fill: line.color ? color : 'currentColor',\n          fontSize: 12,\n          position: line.labelPosition ?? 'insideBottomLeft',\n        }}\n        {...getStyles('referenceLine')}\n      />\n    );\n  });\n\n  const scatters = mappedData.map((item, index) => {\n    const dimmed = shouldHighlight && highlightedArea !== item.name;\n    return (\n      <Scatter\n        data={item.data}\n        fill={getThemeColor(item.color, theme)}\n        key={index}\n        isAnimationActive={false}\n        fillOpacity={dimmed ? 0.1 : 1}\n        {...scatterProps}\n      />\n    );\n  });\n\n  return (\n    <Box\n      ref={ref}\n      {...getStyles('root')}\n      onMouseLeave={handleMouseLeave}\n      dir={dir || 'ltr'}\n      {...others}\n    >\n      <ResponsiveContainer {...getStyles('container')}>\n        <ReChartsScatterChart\n          margin={{\n            bottom: xAxisLabel ? 30 : undefined,\n            left: yAxisLabel ? 10 : undefined,\n            right: yAxisLabel ? 5 : undefined,\n          }}\n          {...scatterChartProps}\n        >\n          <CartesianGrid\n            strokeDasharray={strokeDasharray}\n            vertical={gridAxis === 'y' || gridAxis === 'xy'}\n            horizontal={gridAxis === 'x' || gridAxis === 'xy'}\n            {...getStyles('grid')}\n            {...gridProps}\n          />\n          <XAxis\n            type=\"number\"\n            hide={!withXAxis}\n            dataKey={dataKey.x}\n            tick={{ transform: 'translate(0, 10)', fontSize: 12, fill: 'currentColor' }}\n            stroke=\"\"\n            interval=\"preserveStartEnd\"\n            tickLine={withXTickLine ? { stroke: 'currentColor' } : false}\n            minTickGap={5}\n            unit={unit?.x}\n            tickFormatter={xFormatter}\n            {...getStyles('axis')}\n            {...xAxisProps}\n          >\n            {xAxisLabel && (\n              <Label position=\"insideBottom\" offset={-20} fontSize={12} {...getStyles('axisLabel')}>\n                {xAxisLabel}\n              </Label>\n            )}\n            {xAxisProps?.children}\n          </XAxis>\n          <YAxis\n            type=\"number\"\n            hide={!withYAxis}\n            axisLine={false}\n            dataKey={dataKey.y}\n            tickLine={withYTickLine ? { stroke: 'currentColor' } : false}\n            tick={{ transform: 'translate(-10, 0)', fontSize: 12, fill: 'currentColor' }}\n            allowDecimals\n            unit={unit?.y}\n            tickFormatter={yFormatter}\n            {...getStyles('axis')}\n            {...yAxisProps}\n          >\n            {yAxisLabel && (\n              <Label\n                position=\"insideLeft\"\n                angle={-90}\n                textAnchor=\"middle\"\n                fontSize={12}\n                offset={-5}\n                {...getStyles('axisLabel')}\n              >\n                {yAxisLabel}\n              </Label>\n            )}\n            {yAxisProps?.children}\n          </YAxis>\n\n          {withTooltip && (\n            <Tooltip\n              animationDuration={tooltipAnimationDuration}\n              isAnimationActive={tooltipAnimationDuration !== 0}\n              position={{ y: 0 }}\n              cursor={{\n                stroke: 'var(--chart-grid-color)',\n                strokeWidth: 1,\n                strokeDasharray,\n              }}\n              content={({ label, payload }) => (\n                <ChartTooltip\n                  type=\"scatter\"\n                  label={label}\n                  payload={\n                    labels\n                      ? payload?.map((item) => ({\n                          ...item,\n                          name: labels[getAxis(item.name, dataKey)] || item.name,\n                          value:\n                            getFormatter(getAxis(item.name, dataKey))?.(item.value) ?? item.value,\n                        }))\n                      : payload?.map((item) => ({\n                          ...item,\n                          value:\n                            getFormatter(getAxis(item.name, dataKey))?.(item.value) ?? item.value,\n                        }))\n                  }\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={data}\n                />\n              )}\n              {...tooltipProps}\n            />\n          )}\n\n          {withLegend && (\n            <Legend\n              verticalAlign=\"top\"\n              content={(payload) => (\n                <ChartLegend\n                  payload={payload.payload?.map((item, index) => ({\n                    ...item,\n                    dataKey: data[index].name,\n                  }))}\n                  onHighlight={setHighlightedArea}\n                  legendPosition={legendProps?.verticalAlign || 'top'}\n                  classNames={resolvedClassNames}\n                  styles={resolvedStyles}\n                  series={data}\n                />\n              )}\n              height={44}\n              {...legendProps}\n            />\n          )}\n\n          {referenceLinesItems}\n          {scatters}\n        </ReChartsScatterChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n});\n\nScatterChart.displayName = '@mantine/charts/ScatterChart';\nScatterChart.classes = classes;\n",null],"names":[],"mappings":"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"}},
    {"offset": {"line": 1912, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1917, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/@mantine/charts/esm/index.mjs"],"names":[],"mappings":""}},
    {"offset": {"line": 1931, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}